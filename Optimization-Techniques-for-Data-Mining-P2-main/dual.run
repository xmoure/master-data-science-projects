reset;

print "SOLVING DUAL WITH GENERATED DATASET";

option solver cplex;

model dual.mod;

data ./data/dataset.dat;

solve;

display nu;

 # Define a tolerance level for determining support vectors
param tol_accuracy := 1e-6;


# Calculate the weights w[j]
param w {1..n};
let {j in 1..n} w[j] := sum {i in 1..m_train} lambda[i] * y_train[i] * A_train[i,j];

display w;

# Variable to store the value of gamma
var gamma_val;

# Loop over the training set to find a support vector and calculate gamma
for {i in 1..m_train} {
    if lambda[i] > tol_accuracy and lambda[i] < nu - tol_accuracy then {
        let gamma_val := y_train[i] - sum {j in 1..n} w[j] * A_train[i,j];
    }
}

# Divide by the number of features, if gamma has been set
let gamma_val := gamma_val / n;

display gamma_val;

# Predict and calculate accuracy on the training set
param y_pred_tr {1..m_train};
let {i in 1..m_train} y_pred_tr[i] :=
    if sum {j in 1..n} (A_train[i,j] * w[j] + gamma_val) > 0 then 1 else -1;

param correct_tr := sum {i in 1..m_train} (
    if y_pred_tr[i] = y_train[i] then 1 else 0
);

param accuracy_tr := correct_tr / m_train;

display accuracy_tr;

# Predict and calculate accuracy on the test set
param y_pred_te {1..m_test};
let {i in 1..m_test} y_pred_te[i] :=
    if sum {j in 1..n} (A_test[i,j] * w[j] + gamma_val) > 0 then 1 else -1;

param correct_te := sum {i in 1..m_test} (
    if y_pred_te[i] = y_test[i] then 1 else 0
);

param accuracy_te := correct_te / m_test;

display accuracy_te;


