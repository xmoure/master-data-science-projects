p3 = CUV(dataNum$Size, "App size")
p4 = CUV(dataNum$DaysLastUpdate, "Days since last updated")
p5 = CUV(dataNum$ReleasedDays, "Days since release")
p6 = CUV(dataNum$AppNameLen, "App name length")
p7 = CUV(dataNum$Installs, "App installs")
p8 = CUV(dataNum$Minimum.Android, "Minimum Android")
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8)
pie_chart_add_support <- ggplot(dd, aes(x=factor(1), fill=Ad.Supported)) +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 1) + coord_polar(theta="y") +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.title=element_blank()) +
xlab("") + ylab("") + ggtitle("Ad.Supported")
pie_chart_in_app_purchases <- ggplot(dd, aes(x=factor(1), fill=In.App.Purchases)) +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 1) + coord_polar(theta="y") +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.title=element_blank()) +
xlab("") + ylab("") + ggtitle("In app purchases")
plot(pie_chart_add_support)
plot(pie_chart_in_app_purchases)
plot_grid(pie_chart_add_support, pie_chart_in_app_purchases)
hist1 <- HIST(dd$Installs,"Installs", "Histogram of Installs")
hist2 <- HIST(dd$Rating, "Rating","Histogram of Rating")
hist3 <- HIST(dd$Size, "Size","Histogram of Size")
hist4 <- HIST(dd$AppNameLen, "Name length","Histogram App name length")
hist5 <- HIST(dd$DaysLastUpdate, "Days since last updated","Histogram Days last updated")
hist6 <- HIST(dd$ReleasedDays, "Days since release","Histogram Days since released ")
hist7 <- HIST(dd$Rating.Count, "Rating count","Histogram Rating count ")
hist8 <- HIST(dd$Minimum.Android, "Minimum Andorid","Histogram Minimum Android ")
plot_grid(hist1,hist2, hist3, hist4, hist5, hist6, hist7, hist8, ncols = 2)
#Correlation between numerical variables
correlations <- cor(dataNum) # correlation matrix for numeric variables
print(correlations)
corrplot(correlations)
#Univariate and Multivariate Analysis (Categorical Variables)
#Sort categorical variables in descending order
cat.sort <- function(x){reorder(x,x,function(y){-length(y)})}
cat.var <- which(sapply(dd, is.factor))
for (i in cat.var){
dd[,i] <- cat.sort(dd[,i])
}
c1 <- ggplot(dd, aes(x=Category)) + ggtitle("Category") + xlab("Categories") +
geom_bar(aes(y = 100*(..count..)/sum(..count..))) + ylab("Percentage") + coord_flip() +
scale_x_discrete(limits = rev(levels(dd$Category)))
c2 <- ggplot(dd, aes(x=Content.Rating)) + ggtitle("Content rating") + xlab("Content rating") +
geom_bar(aes(y = 100*(..count..)/sum(..count..))) + ylab("Percentage") + coord_flip() +
scale_x_discrete(limits = rev(levels(dd$Content.Rating)))
ggplot(original_table, aes(x=Category)) + ggtitle("Category original") + xlab("Category") +
geom_bar(aes(y = 100*(..count..)/sum(..count..))) + ylab("Percentage") + coord_flip() +
scale_x_discrete(limits = rev(levels(dd$Content.Rating)))
#Pie charts of categorical variables
pie_chart1 <- ggplot(dd, aes(x=factor(1), fill=Category)) +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 1) + coord_polar(theta="y") +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.title=element_blank()) +
xlab("") + ylab("") + ggtitle("Categories")
plot(pie_chart1)
pie_chart2 <- ggplot(dd, aes(x=factor(1), fill=Content.Rating)) +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 1) + coord_polar(theta="y") +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.title=element_blank()) +
xlab("") + ylab("") + ggtitle("Content Rating")
plot(pie_chart2)
CAT = function(xfeature, yfeature, xlabel, ylabel) {
ggplot(dd, aes(x = xfeature, y = yfeature, fill = xfeature)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1, show.legend = F) +
stat_boxplot(geom = "errorbar", width = 0.5) +
labs(x = xlabel, y = ylabel, title = paste(ylabel, "vs", xlabel)) +
plot_theme
}
x1 = CAT(dd$Category, dd$Rating,
"Category", "Rating")
x2 = CAT(dd$Content.Rating, dd$Rating,
"Content rating",  "Rating")
x3 = CAT(dd$In.App.Purchases, dd$Rating, "In app purchases", "Rating")
x4 = CAT(dd$Ad.Supported, dd$Rating, "Add supported", "Rating")
grid.arrange(c1, pie_chart1)
grid.arrange(c2, pie_chart2)
plot(x1)
plot(x2)
plot(x3)
plot(x4)
#Univariate and Multivariate Analysis (Categorical Variables)
#Sort categorical variables in descending order
cat.sort <- function(x){reorder(x,x,function(y){-length(y)})}
cat.var <- which(sapply(dd, is.factor))
for (i in cat.var){
dd[,i] <- cat.sort(dd[,i])
}
c1 <- ggplot(dd, aes(x=Category)) + ggtitle("Category") + xlab("Categories") +
geom_bar(aes(y = 100*(..count..)/sum(..count..))) + ylab("Percentage") + coord_flip() +
scale_x_discrete(limits = rev(levels(dd$Category)))
c2 <- ggplot(dd, aes(x=Content.Rating)) + ggtitle("Content rating") + xlab("Content rating") +
geom_bar(aes(y = 100*(..count..)/sum(..count..))) + ylab("Percentage") + coord_flip() +
scale_x_discrete(limits = rev(levels(dd$Content.Rating)))
ggplot(original_table, aes(x=Category)) + ggtitle("Category original") + xlab("Category") +
geom_bar(aes(y = 100*(..count..)/sum(..count..))) + ylab("Percentage") + coord_flip() +
scale_x_discrete(limits = rev(levels(dd$Content.Rating)))
#Pie charts of categorical variables
pie_chart1 <- ggplot(dd, aes(x=factor(1), fill=Category)) +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 1) + coord_polar(theta="y") +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.title=element_blank()) +
xlab("") + ylab("") + ggtitle("Categories")
plot(pie_chart1)
pie_chart2 <- ggplot(dd, aes(x=factor(1), fill=Content.Rating)) +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 1) + coord_polar(theta="y") +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.title=element_blank()) +
xlab("") + ylab("") + ggtitle("Content Rating")
plot(pie_chart2)
CAT = function(xfeature, yfeature, xlabel, ylabel) {
ggplot(dd, aes(x = xfeature, y = yfeature, fill = xfeature)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1, show.legend = F) +
stat_boxplot(geom = "errorbar", width = 0.5) +
labs(x = xlabel, y = ylabel, title = paste(ylabel, "vs", xlabel)) +
plot_theme
}
x1 = CAT(dd$Category, dd$Rating,
"Category", "Rating")
x2 = CAT(dd$Content.Rating, dd$Rating,
"Content rating",  "Rating")
x3 = CAT(dd$In.App.Purchases, dd$Rating, "In app purchases", "Rating")
x4 = CAT(dd$Ad.Supported, dd$Rating, "Add supported", "Rating")
x5 = CAT(dd$Category, dd$Size, "Category", "Size")
grid.arrange(c1, pie_chart1)
grid.arrange(c2, pie_chart2)
plot(x1)
plot(x2)
plot(x3)
plot(x4)
plot(x5)
install.packages("learningtower")
library(learningtower)
student_data_2015 <- load_student(2015)
View(student_data_2015)
View(student_data_2015)
student_data_2018 <- load_student(2018)
View(student_data_2018)
View(student_data_2018)
data(school)
View(school)
View(student_data_2018)
View(student_data_2018)
View(student_data_2018)
testing <- which(student_data_2018$year != '2018')
testing <- which(student_data_2018$year == '2018')
testing <- which(student_data_2018$mother_educ == 'NA')
testing <- which(student_data_2018$mother_educ == NA)
summary(student_data_2018)
testing <- which(student_data_2018$mother_educ = 'NA')
testing <- which(student_data_2018$mother_educ == 'NA')
country_data <- data(countrycode)
View(countrycode)
View(countrycode)
student_data_2015 <- load_student(2015)
library(learningtower)
student_data_2015 <- load_student(2015)
student_data_2018 <- load_student(2018)
dd <- sample(student_data_2018, 100, replace = T)
library(car)
data(Davis)
force(Davis)
View(Davis)
library(car)
data(Davis)
summary(Davis)
attributes(Davis)
hist(Davis$weight,15,col= rainbow(15))
head(Davis)
head(Davis)
names(Davis)
head(Davis)
names(Davis)
with(Davis, tapply(height, sex, sumary))
head(Davis)
names(Davis)
with(Davis, tapply(height, sex, summary))
head(Davis)
names(Davis)
with(Davis, tapply(height, sex, summary))
summary(Davis$height)
with(Davis, Boxplot(height~sex, pch = 19,col = rainbow(2), main= "Height vs Sex"))
?with
par(mfrow = c(2,3))
?mfrow
head(Davis)
names(Davis)
with(Davis, tapply(height, sex, summary))
summary(Davis$height)
with(Davis, Boxplot(height~sex, pch = 19,col = rainbow(2), main= "Height vs Sex"))
?with
par(mfrow = c(2,3))
pie(table(sex))
head(Davis)
names(Davis)
with(Davis, tapply(height, sex, summary))
summary(Davis$height)
with(Davis, Boxplot(height~sex, pch = 19,col = rainbow(2), main= "Height vs Sex"))
?with
par(mfrow = c(2,3))
pie(table(Davis$sex))
barplot(table(Davis$sex))
hist(Davis$weigth)
head(Davis)
names(Davis)
with(Davis, tapply(height, sex, summary))
summary(Davis$height)
with(Davis, Boxplot(height~sex, pch = 19,col = rainbow(2), main= "Height vs Sex"))
?with
par(mfrow = c(2,3))
pie(table(Davis$sex))
barplot(table(Davis$sex))
hist(Davis$weight)
tapply( Davis$weight, Davis$sex, hist )# Not nice
plot( weight ~ sex ) # Boxplot isdefault plot
head(Davis)
names(Davis)
with(Davis, tapply(height, sex, summary))
summary(Davis$height)
with(Davis, Boxplot(height~sex, pch = 19,col = rainbow(2), main= "Height vs Sex"))
?with
par(mfrow = c(2,3))
pie(table(Davis$sex))
barplot(table(Davis$sex))
hist(Davis$weight)
tapply( Davis$weight, Davis$sex, hist )# Not nice
plot( Davis$weight ~ Davis$sex ) # Boxplot isdefault plot
#BIVARIATE TWO NUMERICS
library(AER)
citation()
# install.packages("car")
library(car)
data(Davis)
attributes(Davis)
str(Davis)
# Numeric Univariant Description
summary(Davis)
# Rows and columns of data.frame Davis
dim(Davis)
View(Davis)
View(Davis)
# Graphical Description of numeric data
# Histograms:
par(mfrow=c(2,2))
hist(Davis$weight)
hist(Davis$weight,10)
hist(Davis$weight,10,col="blue")
hist(Davis$weight,10,col=rainbow(10))
# Histogram with proportions:
par(mfrow=c(1,1))
hist(Davis$weight,freq=F)  # Proportions
# Dotplot:
par(mfrow=c(2,1))
stripchart(Davis$weight,method="stack")
stripchart(Davis$weight,method="stack",xlab="weight",pch=19,col=3,main="Dotplot Weight in Davis dataset")
# Boxplots (two ways):
par(mfrow=c(2,3))
boxplot(Davis$weight)
boxplot(Davis$weight,col="blue",horizontal = TRUE)
boxplot(Davis$weight,col="blue",horizontal = TRUE, pch=19,labels=Davis$weight)
Boxplot(Davis$weight)
Boxplot(Davis$weight,col="blue",main= "Weight in Davis dataset - row name Id")
Boxplot(Davis$weight,col="blue",main=" Boxplot Weight - Weight Label for Outliers",labels=Davis$weight)
#Barplots and pie charts:
par(mfrow=c(2,2))
barplot(table(Davis$sex))
barplot(table(Davis$sex),col=rainbow(2))
pie(table(Davis$sex))
pie(table(Davis$sex),col=rainbow(2))
table(Davis$sex)
margin.table(table(Davis$sex))
prop.table(table(Davis$sex))
# View(Davis)
head(Davis, n = 20) # n = 20 means  that the first 20 lines are printed in the R console
attach(Davis)
summary(weight)
detach(Davis)
# summary(weight) # Do not work
with(Davis,tapply(height,sex,summary))
summary(Davis$height)
with(Davis,Boxplot(height~sex,pch=19,col=rainbow(2),main="Height vs Sex"))
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
library(car)
library(FactoMineR)
library(lmtest)
library(effects)
library(AER)
library(AER)
data("CPS1985")
View(CPS1985)
View(CPS1985)
df <- CPS1985
# df <- df[-444,]
summary(df)
cor(df[,1:4])
m0 <- lm( wage~education+experience+age, data=df)
summary(m0)
vif(m0) #Extremely high vif
?vif
library(MASS)
#We should apply a transformation on the target:
boxcox(wage~education+experience, data = df) #lambda=0, log transformation
#We should apply a transformation on the target:
boxcox(wage~education+experience, data = df) #lambda=0, log transformation
#And transformations on our predictors
boxTidwell(log(wage)~education+I(experience+0.5), data = df)
#And transformations on our predictors
boxTidwell(log(wage)~education+I(experience+0.5), data = df)
m0 <- lm( wage~education+experience+age, data=df)
summary(m0)
# From before, we know that age and experience are highly correlated so both should not be included in the model.
m1 <- lm( log(wage) ~ I(education^2) + log(I(experience+0.5)) , data=df)
summary(m1)
par(mfrow=c(2,2))
plot( m1, id.n=0 )
par(mfrow=c(1,1))
#And transformations on our predictors
boxTidwell(log(wage)~education+I(experience+0.5), data = df)
# From before, we know that age and experience are highly correlated so both should not be included in the model.
m1 <- lm( log(wage) ~ I(education^2) + log(I(experience+0.5)) , data=df)
summary(m1)
vif(m1) #Much better than before
par(mfrow=c(2,2))
plot( m1, id.n=0 )
par(mfrow=c(1,1))
residualPlots( m1 )
avPlots(m1, id=list(method=list(cooks.distance(m1),"x"), n = 5))
crPlots(m1)
marginalModelPlots(m1) #How my model fits the data
library(effects)
plot(allEffects(m1))
llres<-which(abs(rstudent(m1))>3);llres
llhat<-which(hatvalues(m1)>3*length(coef(m1))/nrow(df));llhat
llcoo<-Boxplot(cooks.distance(m1), id=list(n=2,labels=row.names(df)))
influencePlot(m1)
df[llres,]
# Characteristics of the influential observations:
ll<-which(row.names(df) %in% c("170", "199"));ll
# ll<-which(row.names(df) %in% c("107","170","199","415","62"));ll
df[ll,]
m2 <- lm( log(wage) ~ I(education^2) + log(I(experience)+0.5), data=df[-ll,])
residualPlots( m1 )
llres<-which(abs(rstudent(m1))>3);llres
llres<-which(abs(rstudent(m1))>3);llres
llhat<-which(hatvalues(m1)>3*length(coef(m1))/nrow(df));llhat
llcoo<-Boxplot(cooks.distance(m1), id=list(n=2,labels=row.names(df)))
influencePlot(m1)
llcoo<-Boxplot(cooks.distance(m1), id=list(n=2,labels=row.names(df)))
llhat<-which(hatvalues(m1)>3*length(coef(m1))/nrow(df));llhat
llcoo<-Boxplot(cooks.distance(m1), id=list(n=2,labels=row.names(df)))
llcoo<-Boxplot(cooks.distance(m1), id=list(n=2,labels=row.names(df)))
llres<-which(abs(rstudent(m1))>3);llres
llhat<-which(hatvalues(m1)>3*length(coef(m1))/nrow(df));llhat
llcoo<-Boxplot(cooks.distance(m1), id=list(n=2,labels=row.names(df)))
influencePlot(m1)
test <- df[llres,]
View(test)
df[llres,]
# Characteristics of the influential observations:
ll<-which(row.names(df) %in% c("170", "199"));ll
# ll<-which(row.names(df) %in% c("107","170","199","415","62"));ll
test2 <- df[ll,]
View(test2)
df[llres,]
if(!is.null(dev.list())) dev.off()
## null device
## 1
rm(list = ls())
options(contrasts=c("contr.treatment","contr.treatment"))
setwd("~/Desktop/SIM PARCIAL EXTRA")
load("~/Desktop/SIM PARCIAL EXTRA/CollegeDistance.RData")
# distance is the 10th
# income is the 13th
library(car)
library(lmtest)
library(FactoMineR)
summary(df)
summa <- summary(df$wage)
summa
sev_out_ut <- summa[5]+ 3*(summa[5]- summa[2])
sev_out_ut
sev_out_lt <- summa[2] -3*(summa[5]- summa[2])
sev_out_lt
mild_out_ut <- summa[5] + 1.5*(summa[5]-summa[2])
mild_out_ut
mild_out_lt <- summa[2] -1.5*(summa[5]- summa[2])
mild_out_lt
Boxplot(df$wage)
abline(h=sev_out_ut, col = "red")
abline(h=sev_out_lt, col = "red")
abline(h=mild_out_ut, col = "green")
abline(h=mild_out_lt, col = "green")
llsev <- which((df$wage > sev_out_ut) | (df$wage < sev_out_lt))
llsev # no severe outliers
llmild <- which((df$wage > mild_out_ut) | (df$wage < mild_out_lt))
llmild
df <- df[-llmild,]
cor(df[c(3,8:11)])
res.con = condes(df,10)
res.con$quanti
res.con$quali
res.con$category
res.cat=catdes(df,13)
res.cat$test.chi2
res.cat$category
res.cat$quanti.var; res.cat$quanti
res.cat=catdes(df,13)
res.cat$test.chi2
res.cat$category
res.cat$quanti.var; res.cat$quanti
res.cat=catdes(df,13)
res.cat$test.chi2
res.cat$category
res.cat$quanti.var
res.cat$quanti
?curve
mm <- mean(df$distance)
ss <- sd(df$distance)
hist(df$distance)
curve(dnorm(x,mm,ss), add = T)
hist(df$distance)
curve(dnorm(x,mm,ss), add = T)
hist(df$distance)
curve(dnorm(x,mm,ss), col="red", add = T)
mm <- mean(df$distance)
ss <- sd(df$distance)
p
hist(df$distance)
curve(dnorm(x,mm,ss), col="red", add = T)
hist(df$distance)
curve(dnorm(x,mm,ss), col="red", add = T, lwd=2)
T
mm <- mean(df$distance)
ss <- sd(df$distance)
hist(df$distance)
curve(dnorm(x,mm,ss), col="red", add = T, lwd=2)
shapiro.test(df$distance)
hist(df$distance)
fligner.test(df$distance~df$ethnicity)
Boxplot(df$distance~df$ethnicity)
tapply(df$distance, df$ethnicity, sd)
pairwise.wilcox.test(df$distance,df$ethnicity, exact=F)
low_income <- df[df$income == "low"]
low_income <- df[, df$income == "low"]
low_income <- df[df$income == "low",]
View(low_income)
length(low_income)
?prop.test
pairwise.wilcox.test(df$distance,df$ethnicity, exact=F)
llafam <- df[df$ethnicity == "afam",]
varTest(llafam$distance, alternative="greater",conf.level =0.99 , sigma.squared = 2^2)
library(EnvStats)
llafam <- df[df$ethnicity == "afam",]
varTest(llafam$distance, alternative="greater",conf.level =0.99 , sigma.squared = 2^2)
corrplot(cor(df[c(3,8:11)]))
library(corrplot)
corrplot(cor(df[c(3,8:11)]))
varTest(llafam$distance, alternative="less",conf.level =0.99 , sigma.squared = 2^2)
llafam <- df[df$ethnicity == "afam",]
varTest(llafam$distance, alternative="greater",conf.level =0.99 , sigma.squared = 5^2)
low_income <- df[df$income == "low",]
length(low_income)
prop.test( x= 3208, n = 4467 , p=0.5, conf.level = 0.99)
prop.test( c(3208, 660), c(4467, 1000) ,alternative = "less", conf.level = 0.99)
llmild
pairwise.wilcox.test(df$distance,df$ethnicity, exact=F)
t.test(df$distance~,alternative="two.sided",conf.level =0.99 )
prop.test( x= 3208, n = 4467 , p=0.5, conf.level = 0.99)
Boxplot(df$wage)
abline(h=sev_out_ut, col = "red")
abline(h=sev_out_lt, col = "red")
abline(h=mild_out_ut, col = "green")
abline(h=mild_out_lt, col = "green")
View(df)
if(!is.null(dev.list())) dev.off()
## null device
## 1
rm(list = ls())
options(contrasts=c("contr.treatment","contr.treatment"))
setwd("~/Desktop/SIM PARCIAL EXTRA")
load("~/Desktop/SIM PARCIAL EXTRA/CollegeDistance.RData")
# distance is the 10th
# income is the 13th
library(car)
library(lmtest)
library(FactoMineR)
library(EnvStats)
library(corrplot)
summary(df)
summa <- summary(df$wage)
summa
sev_out_ut <- summa[5]+ 3*(summa[5]- summa[2])
sev_out_ut
sev_out_lt <- summa[2] -3*(summa[5]- summa[2])
sev_out_lt
mild_out_ut <- summa[5] + 1.5*(summa[5]-summa[2])
mild_out_ut
mild_out_lt <- summa[2] -1.5*(summa[5]- summa[2])
mild_out_lt
Boxplot(df$wage)
abline(h=sev_out_ut, col = "red")
abline(h=sev_out_lt, col = "red")
abline(h=mild_out_ut, col = "green")
abline(h=mild_out_lt, col = "green")
llsev <- which((df$wage > sev_out_ut) | (df$wage < sev_out_lt))
llsev # no severe outliers
llmild <- which((df$wage > mild_out_ut) | (df$wage < mild_out_lt))
llmild
df[llmild, "wage"] <- NA
library(missMDA)
imp_res<-imputeMCA(df[3,8:11],method="EM")
df[llmild, "wage"] <- NA
library(missMDA)
imp_res<-imputeMCA(df[,c(3,8:11)],method="EM")
clear
