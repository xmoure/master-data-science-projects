# -*- coding: utf-8 -*-
"""LoadData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12J-4hL-YzMlu-ohyey1i53fZUKYOPFD0
"""

from neo4j import GraphDatabase
from neo4j import GraphDatabase

# URI examples: "neo4j://localhost", "neo4j+s://xxx.databases.neo4j.io"
URI = "neo4j://localhost:7687"
AUTH = ("neo4j", "sdm12345")

with GraphDatabase.driver(URI, auth=AUTH) as driver:
    driver.verify_connectivity()


uri = "neo4j://localhost:7687"
driver = GraphDatabase.driver(uri, auth=("neo4j", "sdm12345"))


def delete_nodes(session):
    query = "MATCH (n) DELETE n"
    session.run(query)


def delete_edges(session):
    query = "MATCH ()-[r]-() DELETE r"
    session.run(query)


# NODES CREATION

def create_conferences(session):
    query = '''
         LOAD CSV WITH HEADERS FROM 'file:///conferences.csv' AS file
         CREATE (:conference {id: file.ConferenceId, name: file.Name})
    '''
    session.run(query)


def create_editions(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///editions.csv' AS file
        CREATE (:edition {id: file.EditionId, name: file.Name, year: file.Year})
    '''
    session.run(query)


def create_journals(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///journals.csv' AS file 
        CREATE (:journal {id: file.JournalId, name: file.journal})
    '''
    session.run(query)


def create_volumes(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///volumes.csv' AS file
        CREATE (:volume {id: file.VolumeId, volume: file.volume, year: file.year})
    '''
    session.run(query)


def create_keywords(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///keywords.csv' AS file
        CREATE (:keyword {id: file.keywordId, keyword: file.keyword})
    '''
    session.run(query)


def create_papers(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///papers.csv' AS file
        CREATE (:paper {id: file.PaperId, title: file.Title, year: toInteger(file.Year), abstract: file.Abstract, doi: file.DOI})
    '''
    session.run(query)


def create_authors(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///authors.csv' AS file
        CREATE (:author {id: file.AuthorId, name: file.Name})
    '''
    session.run(query)


def create_venues(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///venues.csv' AS file
        CREATE (:venue {id: file.LocationId, city: file.City, country: file.Country})
    '''
    session.run(query)


# EDGES CREATION


def create_edition_part_of_conference(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///edition_part_of_conference.csv' AS file
        MATCH (e:edition {id:file.EditionId}), (c:conference {id:file.ConferenceId})
        CREATE (e)-[:partof]->(c)
    '''
    session.run(query)


def volume_belongs_journal(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///volume_belongs_journal.csv' AS file
        MATCH (v:volume {id:file.VolumeId}), (j:journal {id:file.JournalId})
        CREATE (v)-[:belongs]->(j)
    '''
    session.run(query)


def paper_presented_edition(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///paper_published_in_edition.csv' AS file
        MATCH (e:edition {id:file.EditionId}), (p:paper {id:file.PaperId})
        CREATE (p)-[:presented]->(e)
    '''
    session.run(query)


def paper_published_in_volume(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///paper_published_in_volume.csv' AS file
        MATCH (v:volume {id:file.VolumeId}), (p:paper {id:file.PaperId})
        CREATE (p)-[:publishedin]->(v)
    '''
    session.run(query)


def paper_contains_keyword(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///contains_keywords.csv' AS file
        MATCH (p:paper {id:file.PaperId}), (k:keyword {id:file.KeywordId})
        CREATE (p)-[:contains]->(k)
    '''
    session.run(query)


def author_writes_paper(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///author_writes_paper.csv' AS file
        MATCH (a:author {id:file.AuthorId}), (p:paper {id:file.PaperId})
        CREATE (a)-[:writes{corresponding_author: toBoolean(file.IsCorresponding)}]->(p)
    '''
    session.run(query)


def author_reviews_paper(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///author_reviews_paper.csv' AS file
        MATCH (a:author {id:file.ReviewerId}), (p:paper {id:file.PaperId})
        CREATE (a)-[:reviews]->(p)
    '''
    session.run(query)


def edition_held_in(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///edition_held_.csv' AS file
        MATCH (e:edition {id:file.EditionId}), (v:venue {id:file.LocationId})
        CREATE (e)-[:held_in]->(v)
    '''
    session.run(query)


def paper_cites(session):
    query = '''
        LOAD CSV WITH HEADERS FROM 'file:///cited_by.csv' AS file
        MATCH (p:paper {id:file.PaperId}), (citedPaper:paper {id:file.CitedPaper})
        CREATE (p)-[:cites]->(citedPaper)
    '''
    session.run(query)


# CREATE INDEXES

def create_index_on_edition(session):
    query = "CREATE INDEX index_edition FOR (n:edition) ON n.id"
    session.run(query)


def create_index_on_paper(session):
    query = "CREATE INDEX index_paper FOR (n:paper) ON n.id"
    session.run(query)


def create_index_on_conference(session):
    query = "CREATE INDEX index_conference FOR (n:conference) ON n.id"
    session.run(query)


def create_index_on_volume(session):
    query = "CREATE INDEX index_volume FOR (n:volume) ON n.id"
    session.run(query)


def create_index_on_author(session):
    query = "CREATE INDEX index_author FOR (n:author) ON n.id"
    session.run(query)


def create_index_on_keyword(session):
    query = "CREATE INDEX index_keyword FOR (n:keyword) ON n.id"
    session.run(query)


def create_index_on_journal(session):
    query = "CREATE INDEX index_journal FOR (n:journal) ON n.id"
    session.run(query)


def create_index_on_venue(session):
    query = "CREATE INDEX index_venue FOR (n:venue) ON n.id"
    session.run(query)


# Delete indexes

def delete_index_on_paper(session):
    query = "DROP INDEX index_paper"
    session.run(query)


def delete_index_on_edition(session):
    query = "DROP INDEX index_edition"
    session.run(query)


def delete_index_on_conference(session):
    query = "DROP INDEX index_conference"
    session.run(query)


def delete_index_on_volume(session):
    query = "DROP INDEX index_volume"
    session.run(query)


def delete_index_on_author(session):
    query = "DROP INDEX index_author"
    session.run(query)


def delete_index_on_keyword(session):
    query = "DROP INDEX index_keyword"
    session.run(query)


def delete_index_on_journal(session):
    query = "DROP INDEX index_journal"
    session.run(query)


def delete_index_on_venue(session):
    query = "DROP INDEX index_venue"
    session.run(query)


# CREATE EVERYTHING

with driver.session() as session:
    create_conferences(session)
    create_editions(session)
    create_journals(session)
    create_volumes(session)
    create_keywords(session)
    create_papers(session)
    create_authors(session)
    create_venues(session)

    create_index_on_edition(session)
    create_index_on_paper(session)
    create_index_on_conference(session)
    create_index_on_volume(session)
    create_index_on_author(session)
    create_index_on_keyword(session)
    create_index_on_journal(session)
    create_index_on_venue(session)

    create_edition_part_of_conference(session)
    volume_belongs_journal(session)
    paper_presented_edition(session)
    paper_published_in_volume(session)
    paper_contains_keyword(session)
    author_writes_paper(session)
    author_reviews_paper(session)
    edition_held_in(session)
    paper_cites(session)

driver.close()

# DELETE ALL : UNCOMMENT IF YOU WANT TO DELETE ALL
# with driver.session() as session:
#     delete_edges(session)
#     delete_nodes(session)
#
#     delete_index_on_paper(session)
#     delete_index_on_edition(session)
#     delete_index_on_conference(session)
#     delete_index_on_volume(session)
#     delete_index_on_author(session)
#     delete_index_on_keyword(session)
#     delete_index_on_journal(session)
#     delete_index_on_venue(session)
#
# driver.close()
