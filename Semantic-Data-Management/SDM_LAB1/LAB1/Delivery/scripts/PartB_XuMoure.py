# -*- coding: utf-8 -*-
"""PartB_AngeXu_Moure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WolhjYg-N46fzaZraoELP6MKUuJ4Jd1H
"""

from neo4j import GraphDatabase, basic_auth
import pandas as pd

from neo4j import GraphDatabase

URI = "neo4j://localhost:7687"
AUTH = ("neo4j", "sdm12345")

with GraphDatabase.driver(URI, auth=AUTH) as driver:
    driver.verify_connectivity()

uri = "neo4j://localhost:7687"
driver = GraphDatabase.driver(uri, auth=AUTH)

# Query 1
# Find the top 3 most cited papers for each conference

def top_three_most_cited_per_conference(session):
    query = '''
        MATCH (p:paper)-[c:cites]->(citedPaper:paper)-[pres:presented]->(e:edition)-[part:partof]->(conf:conference)
        WITH conf, citedPaper, COUNT(c) AS citations
        ORDER BY conf.name, citations DESC
        WITH collect(citedPaper.title)[..3] as top_papers, conf
        RETURN conf.name, top_papers
    '''
    result = session.run(query)
    cols = ['Conference', 'Papers']
    papers = pd.DataFrame(columns = cols)
    for i in result:
        if len(i.get('top_papers')) == 1:
            to_add = pd.DataFrame({'Conference': i.get('conf.name'), 'Paper 1': (i.get('top_papers'))[0], 'Paper 2': '---', 'Paper 3': '---' }, index = [0])
        elif len(i.get('top_papers')) == 2:
            to_add = pd.DataFrame({'Conference': i.get('conf.name'), 'Paper 1': (i.get('top_papers'))[0], 'Paper 2': (i.get('top_papers'))[1], 'Paper 3': '---' },  index = [0])
        elif len(i.get('top_papers')) == 3:
            to_add = pd.DataFrame({'Conference': i.get('conf.name'), 'Paper 1': (i.get('top_papers')[0]), 'Paper 2': (i.get('top_papers'))[1], 'Paper 3': (i.get('top_papers'))[2] },  index = [0])
        else:
            to_add = pd.DataFrame({'Conference': i.get('conf.name'), 'Paper 1': '---', 'Paper 2': '---', 'Paper 3': '---' },  index = [0])

        papers = pd.concat([papers, to_add], ignore_index = True)
        
    print(papers)

# Query 2
# For each conference find its community

def conference_community(session):
    query = '''
        MATCH (a:author)-[w:writes]->(p:paper)-[:presented]->(e:edition)-[part:partof]->(conf:conference)
        WITH conf, a, collect(DISTINCT e) AS editions
        WHERE size(editions) >= 4
        RETURN conf.name AS conference, collect(a.name)AS authors
    '''
    result = session.run(query)
    cols = ['Conference', 'Authors']
    result_df = pd.DataFrame(columns = cols)
    for i in result:
        to_add = pd.DataFrame({'Conference': i.get('conference'), 'Authors': ';'.join(i.get('authors')) },  index = [0]) 
        result_df = pd.concat([result_df, to_add], ignore_index = True)
    print(result_df)


# Query 3
# Find the impact factors of the journals in your graph

def impact_factor(session):
    query = '''
        MATCH  (j:journal)<-[:belongs]-(v:volume)<-[:publishedin]-(p:paper)<-[c:cites]- (:paper)
        WITH j, v.year AS year, toFloat(count(c)) AS citations
        CALL {
            WITH year,j
            MATCH (j)<-[:belongs]-(vol:volume)<-[pu:publishedin]-(p:paper)
            WHERE toInteger(vol.year) = toInteger(year)-1  OR toInteger(vol.year) = toInteger(year)-2
            RETURN  count(pu) AS publications
        }
        RETURN j.name AS journal, year, CASE publications WHEN 0 THEN 0 ELSE toFloat(citations) / publications END AS impactFactor
        ORDER BY impactFactor DESC;
    '''
    result = session.run(query)
    cols = ['Journal', 'Year', 'Impact factor']
    result_df = pd.DataFrame(columns = cols)
    for i in result:
        to_add = pd.DataFrame({'Journal': i.get('journal'), 'Year': i.get('year'), 'Impact factor': i.get('impactFactor') },  index = [0]) 
        result_df = pd.concat([result_df, to_add], ignore_index = True)
    print(result_df)

# Query 4
# Find the h-indexes of the authors in your graph

def compute_author_hIndexes(session):
    query = '''
       MATCH (p:paper)<-[r:reviews]-(reviewer:author)
        WITH p,collect(case when r.decision=true then 1 else 0 end) as votes 
        WHERE (reduce(s = 0, x IN votes | s + x)/size(votes) ) >= (2/3)
        CALL{
             MATCH (paper:paper)-[c:cites]->(p)<-[w:writes]-(author:author)
             WITH author.name as author,p,count(*) AS citations
             ORDER BY citations DESC
             with author,collect(citations) as citations
             RETURN author,citations
        }
        UNWIND range(size(citations),1,-1) as h
        CALL{
            WITH citations,h
            WITH citations,h,[i IN range(size(citations) - 1,0,-1 ) | i] AS indices
            WITH citations,h,indices
            WITH [i IN indices WHERE citations[i] >= h | i] AS filteredIndices
            RETURN HEAD(filteredIndices)+1 as hIndex
        }
        WITH author,citations,h,hIndex
        WHERE h=hIndex
        RETURN author,citations,h AS hIndex LIMIT 100
    '''
    result = session.run(query)
    cols = ['Author', 'Citations', 'hIndexes']
    result_df = pd.DataFrame(columns = cols)
    for i in result:
        to_add = pd.DataFrame({'Author': i.get('author'), 'Citations': str(i.get('citations')), 'hIndexes': i.get('hIndex') },  index = [0]) 
        result_df = pd.concat([result_df, to_add], ignore_index = True)
    print(result_df)
    
with driver.session() as session:
    print('-----------------------------------------------Query 1----------------------------------------------------')
    top_three_most_cited_per_conference(session)
    print('##########################################################################################################')
    print('------------------------------------------------Query 2---------------------------------------------------')
    conference_community(session)
    print('###########################################################################################################')
    print('-----------------------------------------------Query 3-----------------------------------------------------')
    impact_factor(session)
    print('###########################################################################################################')
    print('-----------------------------------------------Query 4-----------------------------------------------------')
    compute_author_hIndexes(session)
    print('###########################################################################################################')
driver.close()