percent_below_001 <- sum(maf < 0.01) / length(maf) * 100
rs8138488 <- polymorphic_data[, "rs8138488_C"]
genotype_counts <- table(rs8138488)
minor_allele_count <- min(genotype_counts[!is.na(names(genotype_counts))])
maf_rs8138488 <- minor_allele_count / sum(genotype_counts)
# Print genotype counts
cat("Genotype Counts for rs8138488_C:\n")
print(genotype_counts)
# Print minor allele count
cat("\nMinor Allele Count for rs8138488_C:", minor_allele_count)
# Print Minor Allele Frequency (MAF)
cat("\nMinor Allele Frequency (MAF) for rs8138488_C:", maf_rs8138488, "\n")
# Extract the genotype data for rs8138488
rs8138488_genotypes <- na.omit(genetic_only$rs8138488_C)
# Extract the genotype data for rs8138488
rs8138488_genotypes <- na.omit(polymorphic_data$rs8138488_C)
# Calculate the genotype counts for AA, AB, and BB
genotype_counts <- table(rs8138488_genotypes)
aa_count <- genotype_counts["0"]
ab_count <- genotype_counts["1"]
bb_count <- genotype_counts["2"]
total_alleles <- 2 * (aa_count + ab_count + bb_count)
pA <- (2 * aa_count + ab_count) / total_alleles  # frequency of allele A
pB <- (2 * bb_count + ab_count) / total_alleles  # frequency of allele B
# Calculate MAF
maf <- min(pA, pB)
# Output the results
cat("Genotype counts for rs8138488 (AA AB BB):", genotype_counts, "\n")
cat("Minor allele count for rs8138488:", maf * total_alleles, "\n")
cat("MAF for rs8138488:", maf, "\n")
calculate_maf <- function(genotype) {
aa_count <- sum(genotype == 0, na.rm = TRUE)
ab_count <- sum(genotype == 1, na.rm = TRUE)
bb_count <- sum(genotype == 2, na.rm = TRUE)
# Calculate allele frequencies
total_alleles <- 2 * (aa_count + ab_count + bb_count)
pA <- (2 * aa_count + ab_count) / total_alleles  # frequency of allele A
pB <- (2 * bb_count + ab_count) / total_alleles  # frequency of allele B
# Calculate MAF
return(min(pA, pB))
}
maf_all <- apply(polymorphic_data, 2, calculate_maf)
hist(maf_all, breaks = 100, main = "Histogram of Minor Allele Frequencies (MAF)",
xlab = "MAF", ylab = "Frequency", col = "blue")
# Calculate the percentage of markers with MAF below 0.05 and 0.01
percent_maf_below_005 <- sum(maf_all < 0.05) / length(maf_all) * 100
percent_maf_below_001 <- sum(maf_all < 0.01) / length(maf_all) * 100
# Output the results
cat("Percentage of markers with MAF below 0.05:", percent_maf_below_005, "%\n")
cat("Percentage of markers with MAF below 0.01:", percent_maf_below_001, "%\n")
# Calculate observed heterozygosity (Ho) for each marker
calculate_ho <- function(genotype) {
ab_count <- sum(genotype == 1, na.rm = TRUE)  # Count the number of AB genotypes
total_genotypes <- sum(!is.na(genotype))       # Count the total number of non-missing genotypes
ho <- ab_count / total_genotypes               # Calculate Ho as the proportion of AB genotypes
return(ho)
}
# Apply the function to all markers (columns) in the genetic data
ho_all <- apply(genetic_only, 2, calculate_ho)
# Calculate observed heterozygosity (Ho) for each marker
calculate_ho <- function(genotype) {
ab_count <- sum(genotype == 1, na.rm = TRUE)  # Count the number of AB genotypes
total_genotypes <- sum(!is.na(genotype))       # Count the total number of non-missing genotypes
ho <- ab_count / total_genotypes               # Calculate Ho as the proportion of AB genotypes
return(ho)
}
# Apply the function to all markers (columns) in the genetic data
ho_all <- apply(polymorphic_data, 2, calculate_ho)
# Create a histogram of Ho
hist(ho_all, breaks = 100, main = "Histogram of Observed Heterozygosity (Ho)",
xlab = "Ho", ylab = "Frequency", col = "green")
# The theoretical range of variation for Ho is from 0 to 1, where 0 means no heterozygosity
# and 1 means complete heterozygosity.
# Print a summary of the Ho values
summary_ho <- summary(ho_all)
print(summary_ho)
# Calculate observed heterozygosity (Ho) for each marker, which is the frequency of the AB genotype
calculate_ho <- function(genotype) {
ab_count <- sum(genotype == 1, na.rm = TRUE)  # Count the number of AB genotypes
total_genotypes <- sum(!is.na(genotype))       # Count the total number of non-missing genotypes
ho <- ab_count / total_genotypes               # Calculate Ho as the proportion of AB genotypes
return(ho)
}
# Apply the function to all markers (columns) in the genetic data
ho_all <- apply(genetic_only, 2, calculate_ho)
# Calculate observed heterozygosity (Ho) for each marker, which is the frequency of the AB genotype
calculate_ho <- function(genotype) {
ab_count <- sum(genotype == 1, na.rm = TRUE)  # Count the number of AB genotypes
total_genotypes <- sum(!is.na(genotype))       # Count the total number of non-missing genotypes
ho <- ab_count / total_genotypes               # Calculate Ho as the proportion of AB genotypes
return(ho)
}
# Apply the function to all markers (columns) in the genetic data
ho_all <- apply(polymorphic_data, 2, calculate_ho)
# Create a histogram of Ho
hist(ho_all, breaks = 100, main = "Histogram of Observed Heterozygosity (Ho)",
xlab = "Ho", ylab = "Frequency", col = "green")
# The theoretical range of variation for Ho is from 0 to 1, where 0 means no heterozygosity
# and 1 means complete heterozygosity.
# Print a summary of the Ho values
summary_ho <- summary(ho_all)
print(summary_ho)
# Calculate expected heterozygosity (He) for each marker
calculate_he <- function(genotype) {
aa_count <- sum(genotype == 0, na.rm = TRUE)
ab_count <- sum(genotype == 1, na.rm = TRUE)
bb_count <- sum(genotype == 2, na.rm = TRUE)
# Calculate allele frequencies
total_alleles <- 2 * (aa_count + ab_count + bb_count)
pA <- (2 * aa_count + ab_count) / total_alleles  # frequency of allele A
pB <- (2 * bb_count + ab_count) / total_alleles  # frequency of allele B
# Calculate expected heterozygosity
he <- 1 - (pA^2 + pB^2)
return(he)
}
# Apply the function to all markers (columns) in the genetic data
he_all <- apply(genetic_only, 2, calculate_he)
# Calculate expected heterozygosity (He) for each marker
calculate_he <- function(genotype) {
aa_count <- sum(genotype == 0, na.rm = TRUE)
ab_count <- sum(genotype == 1, na.rm = TRUE)
bb_count <- sum(genotype == 2, na.rm = TRUE)
# Calculate allele frequencies
total_alleles <- 2 * (aa_count + ab_count + bb_count)
pA <- (2 * aa_count + ab_count) / total_alleles  # frequency of allele A
pB <- (2 * bb_count + ab_count) / total_alleles  # frequency of allele B
# Calculate expected heterozygosity
he <- 1 - (pA^2 + pB^2)
return(he)
}
# Apply the function to all markers (columns) in the genetic data
he_all <- apply(polymorphic_data, 2, calculate_he)
# Create a histogram of He
hist(he_all, breaks = 100, main = "Histogram of Expected Heterozygosity (He)",
xlab = "He", ylab = "Frequency", col = "purple")
# The theoretical range of variation for He is from 0 to 0.5 for bi-allelic markers,
# where 0 means no genetic diversity and 0.5 means maximum diversity.
# Calculate the average He for the dataset
average_he <- mean(he_all)
# Output the average He
cat("Average expected heterozygosity (He):", average_he, "\n")
setwd("~/Desktop/BioInf-1")
knitr::opts_chunk$set(echo = TRUE)
data <- read.table("TSICHR22RAW.raw", header=TRUE)
genetic_data <- data[, 7:ncol(data)]
num_variants <- ncol(genetic_data)
percentage_missing <- mean(is.na(genetic_data)) * 100
cat("\nNum variants:",num_variants, "\n")
cat("\nPercentage missing:",percentage_missing, "\n")
is_monomorphic <- apply(genetic_data, 2, function(x) length(unique(na.omit(x))) == 1)
percentage_monomorphic <- sum(is_monomorphic) / length(is_monomorphic) * 100
# Removing monomorphic variants
polymorphic_data <- genetic_data[, !is_monomorphic]
remaining_variants <- ncol(polymorphic_data)
cat("\nPercentage monomorphic:",percentage_monomorphic, "%\n")
cat("\nRemaining variants:",remaining_variants, "\n")
rs8138488C_genotypes <- na.omit(polymorphic_data$rs8138488_C)
# Calculate the genotype counts for AA, AB, and BB
genotype_counts <- table(rs8138488C_genotypes)
aa_count <- genotype_counts["0"]
ab_count <- genotype_counts["1"]
bb_count <- genotype_counts["2"]
total_alleles <- 2 * (aa_count + ab_count + bb_count)
pA <- (2 * aa_count + ab_count) / total_alleles  # frequency of allele A
pB <- (2 * bb_count + ab_count) / total_alleles  # frequency of allele B
# Calculate MAF
maf <- min(pA, pB)
# Output the results
cat("Genotype counts for rs8138488 (AA AB BB):", genotype_counts, "\n")
cat("Minor allele count for rs8138488_C:", maf * total_alleles, "\n")
cat("MAF for rs8138488:", maf, "\n")
calculate_MAF <- function(genotype_column) {
# Count the occurrences of each genotype
genotype_counts <- table(genotype_column)
pA <- (genotype_counts["0"] + 0.5 * genotype_counts["1"]) / sum(genotype_counts)
pB <- (genotype_counts["2"] + 0.5 * genotype_counts["1"]) / sum(genotype_counts)
# Calculate MAF
MAF <- min(pA, pB)
return(MAF)
}
# Apply the calculate_MAF function to each column (variant) in the data
MAF_values <- apply(polymorphic_data, 2, calculate_MAF)
# Omit NA values if there are any
MAF_values <- na.omit(MAF_values)
hist(MAF_values, main = "Histogram of Minor Allele Frequencies (MAF)",
xlab = "MAF", ylab = "Frequency", col = "blue")
# Percentage of variants with MAF below 0.05 and below 0.01
percentage_below_5 <- sum(MAF_values < 0.05) / length(MAF_values) * 100
percentage_below_1 <- sum(MAF_values < 0.01) / length(MAF_values) * 100
# Output the percentages
cat("Percentage of variants with MAF below 0.05:", percentage_below_5, "%\n")
cat("Percentage of variants with MAF below 0.01:", percentage_below_1, "%\n")
# Calculate observed heterozygosity (Ho) for each marker, which is the frequency of the AB genotype
calculate_ho <- function(genotype) {
ab_count <- sum(genotype == 1,  na.rm = TRUE)  # Count the number of AB genotypes
total_genotypes <- sum(!is.na(genotype))     # Count the total number of non-missing genotypes
ho <- ab_count / total_genotypes               # Calculate Ho as the proportion of AB genotypes
return(ho)
}
ho_all <- apply(polymorphic_data, 2, calculate_ho)
ho_all <- na.omit(ho_all)
hist(ho_all, main = "Histogram of Observed Heterozygosity (Ho)",
xlab = "Ho", ylab = "Frequency", col = "green")
summary_ho <- summary(ho_all)
print(summary_ho)
# Calculate expected heterozygosity (He) for each marker
calculate_He <- function(genotype_column) {
clean_genotype_column <- na.omit(genotype_column)
# If all values are NA, return NA for He
if (length(clean_genotype_column) == 0) {
return(NA)
}
# Count the occurrences of each genotype
genotype_counts <- table(clean_genotype_column)
# Calculate allele frequencies
# AA counts as two A alleles, AB as one A and one B, BB as two B alleles
num_A <- 2 * genotype_counts["0"] + genotype_counts["1"]
num_B <- 2 * genotype_counts["2"] + genotype_counts["1"]
total_alleles <- num_A + num_B
# Calculate allele frequencies
pA <- num_A / total_alleles
pB <- num_B / total_alleles
He <- 1 - (pA^2 + pB^2)
return(He)
}
He_values <- apply(polymorphic_data, 2, calculate_He)
# Remove NA values from the result
He_values <- na.omit(He_values)
# Create a histogram of He values
hist(He_values, main = "Histogram of Expected Heterozygosity (He)",
xlab = "He", ylab = "Frequency", col = "blue")
# Calculate the average He for the dataset
average_He <- mean(He_values)
# Output the average He
cat("Average expected heterozygosity (He) for this database:", average_He, "\n")
library(HardyWeinberg)
data("NistSTRs")
num_individuals <- nrow(NistSTRs)
num_STRs <- ncol(NistSTRs) / 2  # Since each STR is represented by two columns (alleles)
num_individuals
num_STRs
# Print the results
cat("Number of individuals:", num_individuals, "\n")
cat("Number of STRs:", num_STRs, "\n")
# Custom function to determine the number of alleles for a given STR
num_alleles_per_STR <- function(str_index) {
alleles_1 <- NistSTRs[, (2 * str_index - 1)]
alleles_2 <- NistSTRs[, (2 * str_index)]
# Combine alleles from both columns
all_alleles <- c(alleles_1, alleles_2)
# Count the unique alleles
num_unique_alleles <- length(unique(all_alleles))
return(num_unique_alleles)
}
# Determine the number of alleles for each STR in the database
alleles_per_STR <- sapply(1:(ncol(NistSTRs) / 2), num_alleles_per_STR)
# Descriptive statistics
mean_alleles <- mean(alleles_per_STR)
sd_alleles <- sd(alleles_per_STR)
median_alleles <- median(alleles_per_STR)
min_alleles <- min(alleles_per_STR)
max_alleles <- max(alleles_per_STR)
# Return descriptive statistics
list(mean = mean_alleles, sd = sd_alleles, median = median_alleles, min = min_alleles, max = max_alleles)
alleles_per_STR
calculate_Ho <- function(STR_data) {
heterozygotes <- sum(STR_data[,1] != STR_data[,2])
Ho <- heterozygotes / nrow(STR_data)
return(Ho)
}
observed_heterozygosity <- sapply(seq(1, ncol(NistSTRs), by = 2), function(i) {
calculate_Ho(NistSTRs[, c(i, i+1)])
})
plot(expected_heterozygosity, observed_heterozygosity,
xlab = "Expected Heterozygosity (He)",
ylab = "Observed Heterozygosity (Ho)",
main = "Observed vs Expected Heterozygosity for STRs",
pch = 19)
data <- read.table("TSICHR22RAW.raw", header=TRUE)
genetic_data <- data[, 7:ncol(data)]
num_variants <- ncol(genetic_data)
percentage_missing <- mean(is.na(genetic_data)) * 100
cat("\nNum variants:",num_variants, "\n")
cat("\nPercentage missing:",percentage_missing, "\n")
is_monomorphic <- apply(genetic_data, 2, function(x) length(unique(na.omit(x))) == 1)
percentage_monomorphic <- sum(is_monomorphic) / length(is_monomorphic) * 100
# Removing monomorphic variants
polymorphic_data <- genetic_data[, !is_monomorphic]
remaining_variants <- ncol(polymorphic_data)
cat("\nPercentage monomorphic:",percentage_monomorphic, "%\n")
cat("\nRemaining variants:",remaining_variants, "\n")
rs8138488C_genotypes <- na.omit(polymorphic_data$rs8138488_C)
# Calculate the genotype counts for AA, AB, and BB
genotype_counts <- table(rs8138488C_genotypes)
aa_count <- genotype_counts["0"]
ab_count <- genotype_counts["1"]
bb_count <- genotype_counts["2"]
total_alleles <- 2 * (aa_count + ab_count + bb_count)
pA <- (2 * aa_count + ab_count) / total_alleles  # frequency of allele A
pB <- (2 * bb_count + ab_count) / total_alleles  # frequency of allele B
# Calculate MAF
maf <- min(pA, pB)
# Output the results
cat("Genotype counts for rs8138488 (AA AB BB):", genotype_counts, "\n")
cat("Minor allele count for rs8138488_C:", maf * total_alleles, "\n")
cat("MAF for rs8138488:", maf, "\n")
calculate_MAF <- function(genotype_column) {
# Count the occurrences of each genotype
genotype_counts <- table(genotype_column)
pA <- (genotype_counts["0"] + 0.5 * genotype_counts["1"]) / sum(genotype_counts)
pB <- (genotype_counts["2"] + 0.5 * genotype_counts["1"]) / sum(genotype_counts)
# Calculate MAF
MAF <- min(pA, pB)
return(MAF)
}
# Apply the calculate_MAF function to each column (variant) in the data
MAF_values <- apply(polymorphic_data, 2, calculate_MAF)
# Omit NA values if there are any
MAF_values <- na.omit(MAF_values)
hist(MAF_values, main = "Histogram of Minor Allele Frequencies (MAF)",
xlab = "MAF", ylab = "Frequency", col = "blue")
# Percentage of variants with MAF below 0.05 and below 0.01
percentage_below_5 <- sum(MAF_values < 0.05) / length(MAF_values) * 100
percentage_below_1 <- sum(MAF_values < 0.01) / length(MAF_values) * 100
# Output the percentages
cat("Percentage of variants with MAF below 0.05:", percentage_below_5, "%\n")
cat("Percentage of variants with MAF below 0.01:", percentage_below_1, "%\n")
# Calculate observed heterozygosity (Ho) for each marker, which is the frequency of the AB genotype
calculate_ho <- function(genotype) {
ab_count <- sum(genotype == 1,  na.rm = TRUE)  # Count the number of AB genotypes
total_genotypes <- sum(!is.na(genotype))     # Count the total number of non-missing genotypes
ho <- ab_count / total_genotypes               # Calculate Ho as the proportion of AB genotypes
return(ho)
}
ho_all <- apply(polymorphic_data, 2, calculate_ho)
ho_all <- na.omit(ho_all)
hist(ho_all, main = "Histogram of Observed Heterozygosity (Ho)",
xlab = "Ho", ylab = "Frequency", col = "green")
summary_ho <- summary(ho_all)
print(summary_ho)
# Calculate expected heterozygosity (He) for each marker
calculate_He <- function(genotype_column) {
clean_genotype_column <- na.omit(genotype_column)
# If all values are NA, return NA for He
if (length(clean_genotype_column) == 0) {
return(NA)
}
# Count the occurrences of each genotype
genotype_counts <- table(clean_genotype_column)
# Calculate allele frequencies
# AA counts as two A alleles, AB as one A and one B, BB as two B alleles
num_A <- 2 * genotype_counts["0"] + genotype_counts["1"]
num_B <- 2 * genotype_counts["2"] + genotype_counts["1"]
total_alleles <- num_A + num_B
# Calculate allele frequencies
pA <- num_A / total_alleles
pB <- num_B / total_alleles
He <- 1 - (pA^2 + pB^2)
return(He)
}
He_values <- apply(polymorphic_data, 2, calculate_He)
# Remove NA values from the result
He_values <- na.omit(He_values)
# Create a histogram of He values
hist(He_values, main = "Histogram of Expected Heterozygosity (He)",
xlab = "He", ylab = "Frequency", col = "blue")
# Calculate the average He for the dataset
average_He <- mean(He_values)
# Output the average He
cat("Average expected heterozygosity (He) for this database:", average_He, "\n")
library(HardyWeinberg)
data("NistSTRs")
num_individuals <- nrow(NistSTRs)
num_STRs <- ncol(NistSTRs) / 2  # Since each STR is represented by two columns (alleles)
num_individuals
num_STRs
# Print the results
cat("Number of individuals:", num_individuals, "\n")
cat("Number of STRs:", num_STRs, "\n")
# Custom function to determine the number of alleles for a given STR
num_alleles_per_STR <- function(str_index) {
alleles_1 <- NistSTRs[, (2 * str_index - 1)]
alleles_2 <- NistSTRs[, (2 * str_index)]
# Combine alleles from both columns
all_alleles <- c(alleles_1, alleles_2)
# Count the unique alleles
num_unique_alleles <- length(unique(all_alleles))
return(num_unique_alleles)
}
# Determine the number of alleles for each STR in the database
alleles_per_STR <- sapply(1:(ncol(NistSTRs) / 2), num_alleles_per_STR)
# Descriptive statistics
mean_alleles <- mean(alleles_per_STR)
sd_alleles <- sd(alleles_per_STR)
median_alleles <- median(alleles_per_STR)
min_alleles <- min(alleles_per_STR)
max_alleles <- max(alleles_per_STR)
# Return descriptive statistics
list(mean = mean_alleles, sd = sd_alleles, median = median_alleles, min = min_alleles, max = max_alleles)
alleles_per_STR
allele_counts <- table(alleles_per_STR)
barplot(allele_counts, main = "Number of STRs per Number of Alleles", xlab = "Number of Alleles", ylab = "Number of STRs")
most_common_alleles <- as.integer(names(allele_counts)[which.max(allele_counts)])
calculate_He <- function(STR_data) {
alleles <- unlist(STR_data)  # Combine both columns into one vector
allele_frequencies <- table(alleles) / length(alleles)  # Calculate frequencies
He <- 1 - sum(allele_frequencies^2)
return(He)
}
expected_heterozygosity <- sapply(seq(1, ncol(NistSTRs), by = 2), function(i) {
calculate_He(NistSTRs[, c(i, i+1)])
})
hist(expected_heterozygosity, main="Expected Heterozygosity of STRs", xlab="He")
average_He <- mean(expected_heterozygosity)
average_He
calculate_Ho <- function(STR_data) {
heterozygotes <- sum(STR_data[,1] != STR_data[,2])
Ho <- heterozygotes / nrow(STR_data)
return(Ho)
}
observed_heterozygosity <- sapply(seq(1, ncol(NistSTRs), by = 2), function(i) {
calculate_Ho(NistSTRs[, c(i, i+1)])
})
plot(expected_heterozygosity, observed_heterozygosity,
xlab = "Expected Heterozygosity (He)",
ylab = "Observed Heterozygosity (Ho)",
main = "Observed vs Expected Heterozygosity for STRs",
pch = 19)
#abline(0, 1)
set.seed(6046)
library(kernlab)
vanilladot
rbfdot
rbf <- rbfdot(sigma=10^-2)
rbf
rbf@.Data # the kernel function itself
rbf@kpar  # the kernel paramters
rbf@class # the class
# we generate toy data
N <- 20
M <- 25
x <- matrix( rnorm(N*M,mean=0,sd=1), N, M)
t <- rbinom(n=20, size=1, prob=0.5)
plot(x, main="Just a bunch of random points in the space")
rbf(x[1,],x[2,])
K <- kernelMatrix(rbf,x[1:5,],x[6:20,])
dim(K)
K <- kernelMatrix(rbf,x)
dim(K)
m1 <- ksvm (x,t, kernel=rbf, type="C-svc", scale=c())
m1
m2 <- ksvm (K,t, type="C-svc", scale=c())
m2
data <- read.table("data/reuters.txt.gz", header=T)
# We leave only three topics for analysis: Crude Oil, Coffee and Grain-related news
data <- data[data$Topic == "crude" | data$Topic == "grain" | data$Topic == "coffee",]
data$Content <- as.character(data$Content)    # R originally loads this as factor, so needs fixing
data$Topic <- factor(data$Topic)              # re-level the factor to have only three levels
levels(data$Topic)
length(data$Topic)
table(data$Topic)
## an example of a text about coffee
data[2,]
## an example of a text about grain
data[7,]
## an example of a text about crude oil
data[12,]
(N <- dim(data)[1])  # number of rows
# we shuffle the data first
data <- data[sample(1:N, N),]
k <- stringdot("spectrum", length=3, normalized=TRUE)
toy_text <- "I did it my way"
k(toy_text, toy_text)
k(toy_text, "He did it his way")
k(toy_text, "She did it her way")
k(toy_text, "Let's find our way out")
k(toy_text, "Brexit means Brexit")
dff <- read.table("TSICHR22RAW.raw",header = T)
df <- dff[,-c(1:6)]
variants <- ncol(df)
total <- nrow(df) * variants
missing <- sum(is.na(df))
percentage_missing <- missing/total
cat("Number of variants:", variants, "\n")
cat("Percentage of missing data: ", percentage_missing*100, "%\n")
u <- 1
mono <- numeric()
for (i in 1: variants)
{
a <- length(unique(na.omit(df[,i])))
if (a==1){
mono[u] <-  i
u <- u+1
}
}
percentage_mono <- length(mono)/variants;
var_aft <- df[,-mono]
cat("Percentage of monomorphic variants:", percentage_mono*100, "%\n")
cat("Number of remaining variants:", ncol(var_aft), "\n")
rs8138488_C <- var_aft[,"rs8138488_C"]
unique_values <- unique(rs8138488_C)
rs8138488_C <- factor(rs8138488_C, levels = c("0", "1", "2"), labels = c("AA", "AB", "BB"))
tab <- table(rs8138488_C); #Genotype count
minor_al <- tab[2]+2*tab[3]
gen <- sum(tab)
pa <- (tab[1]+0.5*tab[2])/gen
pb <- (tab[3]+0.5*tab[2])/gen
MAF <- min(pa,pb)
cat("Genotype Counts for rs8138488_C:\n")
tab
cat("\nMinor Allele Count for rs8138488_C:", minor_al, "\n")
cat("MAF for rs8138488_C:", MAF, "\n")
