library(dplyr)
library(HardyWeinberg)
library(data.table)
library(psych)
library(haplo.stats)
#install.packages("haplo.stats")
rs34684677 <- FOXP2_data[,c("rs34684677")]
rs2894715 <- FOXP2_data[,c("rs2894715")]
rs34684677.gen <- genotype(rs34684677,sep="/")
rs2894715.gen <- genotype(rs2894715,sep="/")
ld <- LD(rs34684677.gen,rs2894715.gen)
ld
# Assuming you have the genotypes for rs34684677 and rs2894715 in two vectors called rs34684677 and rs2894715
# Calculate allele frequencies
calculate_allele_frequencies <- function(genotypes) {
alleles <- unlist(strsplit(genotypes, split = "/"))
freqs <- table(alleles) / (2 * length(genotypes))
return(freqs)
}
# Calculate allele frequencies for each SNP
allele_freqs_rs34684677 <- calculate_allele_frequencies(rs34684677)
allele_freqs_rs2894715 <- calculate_allele_frequencies(rs2894715)
# Assuming 'G' and 'T' are the alleles for rs34684677 and 'G' and 'T' for rs2894715
p_G <- allele_freqs_rs34684677["G"]
p_T <- 1 - p_G  # Assuming there are only two alleles at SNP rs34684677
p_G_prime <- allele_freqs_rs2894715["G"]
p_T_prime <- 1 - p_G_prime  # Assuming there are only two alleles at SNP rs2894715
# Provided linkage disequilibrium D value
D <- -0.05493703
# Calculate haplotype frequencies
p_GG_prime <- p_G * p_G_prime + D
p_GT_prime <- p_G * p_T_prime - D
p_TG_prime <- p_T * p_G_prime - D
p_TT_prime <- p_T * p_T_prime + D
# Output haplotype frequencies
haplotype_frequencies <- c(GG_prime = p_GG_prime, GT_prime = p_GT_prime,
TG_prime = p_TG_prime, TT_prime = p_TT_prime)
# Print haplotype frequencies
print(haplotype_frequencies)
# Identify the most common haplotype
most_common_haplotype <- names(which.max(haplotype_frequencies))
print(paste("The most common haplotype is:", most_common_h
# Assuming you have the genotypes for rs34684677 and rs2894715 in two vectors called rs34684677 and rs2894715
# Calculate allele frequencies
calculate_allele_frequencies <- function(genotypes) {
alleles <- unlist(strsplit(genotypes, split = "/"))
freqs <- table(alleles) / (2 * length(genotypes))
return(freqs)
}
# Calculate allele frequencies for each SNP
allele_freqs_rs34684677 <- calculate_allele_frequencies(rs34684677)
allele_freqs_rs2894715 <- calculate_allele_frequencies(rs2894715)
# Assuming 'G' and 'T' are the alleles for rs34684677 and 'G' and 'T' for rs2894715
p_G <- allele_freqs_rs34684677["G"]
p_T <- 1 - p_G  # Assuming there are only two alleles at SNP rs34684677
p_G_prime <- allele_freqs_rs2894715["G"]
p_T_prime <- 1 - p_G_prime  # Assuming there are only two alleles at SNP rs2894715
# Provided linkage disequilibrium D value
D <- -0.05493703
# Calculate haplotype frequencies
p_GG_prime <- p_G * p_G_prime + D
p_GT_prime <- p_G * p_T_prime - D
p_TG_prime <- p_T * p_G_prime - D
p_TT_prime <- p_T * p_T_prime + D
# Output haplotype frequencies
haplotype_frequencies <- c(GG_prime = p_GG_prime, GT_prime = p_GT_prime,
TG_prime = p_TG_prime, TT_prime = p_TT_prime)
# Print haplotype frequencies
print(haplotype_frequencies)
# Identify the most common haplotype
most_common_haplotype <- names(which.max(haplotype_frequencies))
print(paste("The most common haplotype is:", most_common_h))
# Assuming you have the genotypes for rs34684677 and rs2894715 in two vectors called rs34684677 and rs2894715
# Calculate allele frequencies
calculate_allele_frequencies <- function(genotypes) {
alleles <- unlist(strsplit(genotypes, split = "/"))
freqs <- table(alleles) / (2 * length(genotypes))
return(freqs)
}
# Calculate allele frequencies for each SNP
allele_freqs_rs34684677 <- calculate_allele_frequencies(rs34684677)
allele_freqs_rs2894715 <- calculate_allele_frequencies(rs2894715)
# Assuming 'G' and 'T' are the alleles for rs34684677 and 'G' and 'T' for rs2894715
p_G <- allele_freqs_rs34684677["G"]
p_T <- 1 - p_G  # Assuming there are only two alleles at SNP rs34684677
p_G_prime <- allele_freqs_rs2894715["G"]
p_T_prime <- 1 - p_G_prime  # Assuming there are only two alleles at SNP rs2894715
# Provided linkage disequilibrium D value
D <- -0.05493703
# Calculate haplotype frequencies
p_GG_prime <- p_G * p_G_prime + D
p_GT_prime <- p_G * p_T_prime - D
p_TG_prime <- p_T * p_G_prime - D
p_TT_prime <- p_T * p_T_prime + D
# Output haplotype frequencies
haplotype_frequencies <- c(GG_prime = p_GG_prime, GT_prime = p_GT_prime,
TG_prime = p_TG_prime, TT_prime = p_TT_prime)
# Print haplotype frequencies
print(haplotype_frequencies)
# Identify the most common haplotype
most_common_haplotype <- names(which.max(haplotype_frequencies))
print(paste("The most common haplotype is:", most_common_haplotype))
Geno <- cbind(substr(FOXP2_data$rs34684677, 1, 1), substr(FOXP2_data$rs34684677, 3, 3),
substr(FOXP2_data$rs2894715, 1, 1), substr(FOXP2_data$rs2894715, 3, 3))
snpnames <- c("rs34684677", "rs2894715")
haplo_em <- haplo.em(Geno, locus.label = snpnames)
print(haplo_em)
D <- -0.05493703
# Create frequency tables for each SNP
r1 <- table(rs34684677)
r2 <- table(rs2894715)
# Calculate allele frequencies for each SNP
# For SNP rs34684677
pA <- (r1["G/G"]*2 + r1["G/T"]) / (sum(r1)*2)
pa <- (r1["T/T"]*2 + r1["G/T"]) / (sum(r1)*2)
# For SNP rs2894715
pB <- (r2["G/G"]*2 + r2["T/G"]) / (sum(r2)*2)
pb <- (r2["T/T"]*2 + r2["T/G"]) / (sum(r2)*2)
# Calculate haplotype frequencies
pAB <- pA * pB + D  # Frequency of haplotype AB (G at rs34684677 and G at rs2894715)
pAb <- pA * pb - D  # Frequency of haplotype Ab (G at rs34684677 and T at rs2894715)
paB <- pa * pB - D  # Frequency of haplotype aB (T at rs34684677 and G at rs2894715)
pab <- pa * pb + D  # Frequency of haplotype ab (T at rs34684677 and T at rs2894715)
# Print haplotype frequencies
haplotype_frequencies <- c(pAB, pAb, paB, pab)
names(haplotype_frequencies) <- c("pAB", "pAb", "paB", "pab")
print(haplotype_frequencies)
D <- -0.05493703
# Calculate allele frequencies for SNP rs34684677
pG <- (sum(rs34684677.gen == "G/G")*2 + sum(rs34684677.gen == "G/T")) / (2 * length(rs34684677.gen))
pT <- 1 - pG  # Assuming only two alleles G and T
# Calculate allele frequencies for SNP rs2894715
qG <- (sum(rs2894715.gen  == "G/G")*2 + sum(rs2894715.gen  == "T/G")) / (2 * length(rs2894715.gen ))
qT <- 1 - qG  # Assuming only two alleles G and T
# Calculate haplotype frequencies
hGG <- pG * qG + D
hGT <- pG * qT - D
hTG <- pT * qG - D
hTT <- pT * qT + D
# Output haplotype frequencies
haplo_freqs <- c(hGG, hGT, hTG, hTT)
names(haplo_freqs) <- c("hGG", "hGT", "hTG", "hTT")
# Print haplotype frequencies rounded to three decimal places
print(round(haplo_freqs, 3))
D <- ld$D
# Calculate allele frequencies for SNP rs34684677
pG <- (sum(rs34684677.gen == "G/G")*2 + sum(rs34684677.gen == "G/T")) / (2 * length(rs34684677.gen))
pT <- 1 - pG  # Assuming only two alleles G and T
# Calculate allele frequencies for SNP rs2894715
qG <- (sum(rs2894715.gen  == "G/G")*2 + sum(rs2894715.gen  == "T/G")) / (2 * length(rs2894715.gen ))
qT <- 1 - qG  # Assuming only two alleles G and T
# Calculate haplotype frequencies
hGG <- pG * qG + D
hGT <- pG * qT - D
hTG <- pT * qG - D
hTT <- pT * qT + D
# Output haplotype frequencies
haplo_freqs <- c(hGG, hGT, hTG, hTT)
names(haplo_freqs) <- c("hGG", "hGT", "hTG", "hTT")
# Print haplotype frequencies rounded to three decimal places
print(round(haplo_freqs, 3))
D <- ld$D
# Calculate allele frequencies for SNP rs34684677
pG <- (sum(rs34684677.gen == "G/G")*2 + sum(rs34684677.gen == "G/T")) / (2 * length(rs34684677.gen))
pT <- 1 - pG
# Calculate allele frequencies for SNP rs2894715
qG <- (sum(rs2894715.gen  == "G/G")*2 + sum(rs2894715.gen  == "T/G")) / (2 * length(rs2894715.gen ))
qT <- 1 - qG
# Calculate haplotype frequencies
hGG <- pG * qG + D
hGT <- pG * qT - D
hTG <- pT * qG - D
hTT <- pT * qT + D
haplo_freqs <- c(hGG, hGT, hTG, hTT)
names(haplo_freqs) <- c("hGG", "hGT", "hTG", "hTT")
print(round(haplo_freqs, 3))
most_common_haplo <- names(which.max(haplo_freqs))
cat("The most common haplotype is:", most_common_haplo, "with a frequency of:", round(max(haplo_freqs), 3), "\n")
Geno <- cbind(substr(FOXP2_data$rs34684677, 1, 1), substr(FOXP2_data$rs34684677, 3, 3),
substr(FOXP2_data$rs2894715, 1, 1), substr(FOXP2_data$rs2894715, 3, 3))
snpnames <- c("rs34684677", "rs2894715")
haplo_em <- haplo.em(Geno, locus.label = snpnames)
print(haplo_em)
D <- ld$D
# Calculate allele frequencies for SNP rs34684677
pG <- (sum(rs34684677.gen == "G/G")*2 + sum(rs34684677.gen == "G/T")) / (2 * length(rs34684677.gen))
pT <- 1 - pG
# Calculate allele frequencies for SNP rs2894715
qG <- (sum(rs2894715.gen  == "G/G")*2 + sum(rs2894715.gen  == "T/G")) / (2 * length(rs2894715.gen ))
qT <- 1 - qG
# Calculate haplotype frequencies
hGG <- pG * qG + D
hGT <- pG * qT - D
hTG <- pT * qG - D
hTT <- pT * qT + D
haplo_freqs <- c(hGG, hGT, hTG, hTT)
names(haplo_freqs) <- c("hGG", "hGT", "hTG", "hTT")
print(round(haplo_freqs, 3))
most_common_haplo <- names(which.max(haplo_freqs))
cat("The most common haplotype is:", most_common_haplo, "with a frequency of:", round(max(haplo_freqs), 3), "\n")
library(genetics)
library(dplyr)
library(HardyWeinberg)
library(data.table)
library(psych)
library(haplo.stats)
#install.packages("haplo.stats")
FOXP2_data <- read.table("FOXP2/FOXP2.dat", header = TRUE)
FOXP2_data <- FOXP2_data[,2:ncol(FOXP2_data)]
n_individuals <- nrow(FOXP2_data)
n_SNPs <- ncol(FOXP2_data)
percent_missing <- sum(is.na(FOXP2_data)) / (n_individuals * n_SNPs) * 100
cat("\nNum individuals:",n_individuals, "\n")
cat("\nNum SNPs:",n_SNPs, "\n")
cat("\nPercentage missing:",percent_missing, "\n")
rs34684677 <- FOXP2_data[,c("rs34684677")]
rs2894715 <- FOXP2_data[,c("rs2894715")]
rs34684677.gen <- genotype(rs34684677,sep="/")
rs2894715.gen <- genotype(rs2894715,sep="/")
ld <- LD(rs34684677.gen,rs2894715.gen)
ld
Geno <- cbind(substr(FOXP2_data$rs34684677, 1, 1), substr(FOXP2_data$rs34684677, 3, 3),
substr(FOXP2_data$rs2894715, 1, 1), substr(FOXP2_data$rs2894715, 3, 3))
snpnames <- c("rs34684677", "rs2894715")
haplo_em <- haplo.em(Geno, locus.label = snpnames)
print(haplo_em)
D <- ld$D
# Calculate allele frequencies for SNP rs34684677
pG <- (sum(rs34684677.gen == "G/G")*2 + sum(rs34684677.gen == "G/T")) / (2 * length(rs34684677.gen))
pT <- 1 - pG
# Calculate allele frequencies for SNP rs2894715
qG <- (sum(rs2894715.gen  == "G/G")*2 + sum(rs2894715.gen  == "T/G")) / (2 * length(rs2894715.gen ))
qT <- 1 - qG
# Calculate haplotype frequencies
hGG <- pG * qG + D
hGT <- pG * qT - D
hTG <- pT * qG - D
hTT <- pT * qT + D
haplo_freqs <- c(hGG, hGT, hTG, hTT)
names(haplo_freqs) <- c("hGG", "hGT", "hTG", "hTT")
print(round(haplo_freqs, 3))
most_common_haplo <- names(which.max(haplo_freqs))
cat("The most common haplotype is:", most_common_haplo, "with a frequency of:", round(max(haplo_freqs), 3), "\n")
bim <- read.table("FOXP2/FOXP2.bim", header=FALSE)
bim_alleles <- paste(bim[,5],bim[,6],sep = "/")
gendata_counts <- MakeCounts(FOXP2_data, bim_alleles, sep = "/")
chisq_stats <- HWChisqStats(gendata_counts,pvalues = FALSE)
chisq_pval <- HWChisqStats(gendata_counts,pvalues = TRUE)
chisq_pval_sig <- sum(chisq_pval<0.05) # number of significant SNPs
chisq_pval_sig
expected_by_chance <- nrow(bim) * 0.05
cat("\nExpected by chance:",expected_by_chance, "(5%)\n")
# Total number of SNPs tested
total_SNPs <- nrow(bim)
# Calculate the percentage of significant variants
percentage_significant <- (chisq_pval_sig / total_SNPs) * 100
cat("\nPercentage of significant variants:", percentage_significant, "%\n")
# Extract SNP names and convert to genotypes
snps <- colnames(FOXP2_data)
genotypes <- lapply(FOXP2_data, function(x) genotype(as.character(x)))
# Initialize a matrix to store R^2 values
r2_matrix <- matrix(NA, ncol = length(snps), nrow = length(snps), dimnames = list(snps, snps))
# Compute LD and fill the matrix
for (i in 1:(length(snps) - 1)) {
for (j in (i + 1):length(snps)) {
ld_result <- LD(genotypes[[i]], genotypes[[j]])
r2_matrix[i, j] <- ld_result$`R^2`
}
}
# Create LD heatmap using base R image function
image(r2_matrix, main = "LD Heatmap (R^2 values)", xlab = "SNP Index", ylab = "SNP Index", col = heat.colors(256))
calculate_MAF <- function(snp) {
alleles <- unlist(strsplit(as.character(snp), "/", fixed = TRUE))
freqs <- table(alleles) / length(alleles)
return(min(freqs))
}
MAFs <- sapply(FOXP2_data, calculate_MAF)
df_filtered <- FOXP2_data[, MAFs >= 0.35]
genotypes_filtered <- lapply(df_filtered, function(x) genotype(as.character(x)))
snps_filtered <- colnames(df_filtered)
r2_matrix_filtered <- matrix(NA, ncol = length(snps_filtered), nrow = length(snps_filtered), dimnames = list(snps_filtered, snps_filtered))
for (i in 1:(length(snps_filtered) - 1)) {
for (j in (i + 1):length(snps_filtered)) {
ld_result <- LD(genotypes_filtered[[i]], genotypes_filtered[[j]])
r2_matrix_filtered[i, j] <- ld_result$`R^2`
}
}
diag(r2_matrix_filtered) <- 1
image(r2_matrix_filtered, main = "LD Heatmap After Filtering (R^2 values)", xlab = "SNP Index", ylab = "SNP Index", col = heat.colors(256))
basepair_positions <- bim[, 4]
num_snps <- length(basepair_positions)
# Initialize a matrix to store distances
distance_matrix <- matrix(NA, nrow = num_snps, ncol = num_snps)
# Compute the distances
for (i in 1:(num_snps - 1)) {
for (j in (i + 1):num_snps) {
distance_matrix[i, j] <- abs(basepair_positions[i] - basepair_positions[j])
distance_matrix[j, i] <- distance_matrix[i, j]  # Distance matrix is symmetric
}
}
distances <- as.vector(distance_matrix)
r2_values <- as.vector(r2_matrix)
plot_data <- data.frame(Distance = distances, R2 = r2_values)
plot(plot_data$Distance, plot_data$R2,
xlab = "Distance in base pairs",
ylab = expression(R^2),
main = "R^2 vs. Distance",
pch = 20,  # Use a solid circle
cex = 0.6)
APOE_data <- read.table("APOE/APOE.dat", header = TRUE)
APOE_data <- APOE_data[,2:ncol(APOE_data)]
n_individuals <- nrow(APOE_data)
n_SNPs <- ncol(APOE_data)
# Calculate the percentage of missing data
percent_missing <- sum(is.na(APOE_data)) / (n_individuals * n_SNPs) * 100
cat("\nNum individuals:",n_individuals, "\n")
cat("\nNum SNPs:",n_SNPs, "\n")
cat("\nPercentage missing:",percent_missing, "\n")
theoretical_haplotypes <- 2^n_SNPs
cat("\nTheoretically there can be :",theoretical_haplotypes,"haplotypes\n")
geno <- data.frame(row.names = row.names(APOE_data))
for(i in 1:ncol(APOE_data)){
geno <- cbind(geno,substr(APOE_data[,i],1,1),substr(APOE_data[,i],3,3))
}
geno_matrix <- as.matrix(geno)
snpts <- colnames(APOE_data)
haplo_em <- haplo.em(geno_matrix,locus.label = snpts)
haplotypes <- length(haplo_em$hap.prob)
cat("\nHaplotypes :",haplotypes,"\n")
probabilities <- sort(haplo_em$hap.prob,decreasing = T)
cat("\nProbabilities in decreasing order :",probabilities,"\n")
most_common <-  which.max(haplo_em$hap.prob)
cat("\nMost common :", most_common,"\n")
bim_he_data <- read.table("APOE/APOE.bim", header = FALSE, col.names = c("chromosome", "SNP", "genetic_dist", "position", "allele1", "allele2"))
allele_pairs <- paste(bim_he_data$allele1, bim_he_data$allele2, sep = "/")
df <- APOE_data
df[] <- lapply(df, function(x) gsub("/", "", x))
df_counts <- MakeCounts(df, allele_pairs)
df_counts[,c(1,3)] <- df_counts[,c(3,1)]
pb <- numeric(nrow(df_counts))
for(i in 1:nrow(df_counts)) {
pb[i] <- (df_counts[i,3] + 0.5 * df_counts[i,2]) / sum(df_counts[i,])
}
to_remove <- which(pb<0.1);
df_filtered <- APOE_data[,-to_remove]
geno <- data.frame(row.names = row.names(df_filtered))
for(i in 1:ncol(df_filtered)){
geno <- cbind(geno,substr(df_filtered[,i],1,1),substr(df_filtered[,i],3,3))
}
geno <- as.matrix(geno)
snpnames <- colnames(df_filtered)
HaploEM <- haplo.em(geno, locus.label = snpnames)
prob <- sort(HaploEM$hap.prob, decreasing = T)
cat("Number of haplotypes:", length(prob), "\n")
FOXP2_data <- read.table("FOXP2/FOXP2.dat", header = TRUE)
FOXP2_data <- FOXP2_data[,2:ncol(FOXP2_data)]
n_individuals <- nrow(FOXP2_data)
n_SNPs <- ncol(FOXP2_data)
percent_missing <- sum(is.na(FOXP2_data)) / (n_individuals * n_SNPs) * 100
cat("\nNum individuals:",n_individuals, "\n")
cat("\nNum SNPs:",n_SNPs, "\n")
cat("\nPercentage missing:",percent_missing, "\n")
rs34684677 <- FOXP2_data[,c("rs34684677")]
rs2894715 <- FOXP2_data[,c("rs2894715")]
rs34684677.gen <- genotype(rs34684677,sep="/")
rs2894715.gen <- genotype(rs2894715,sep="/")
ld <- LD(rs34684677.gen,rs2894715.gen)
ld
Geno <- cbind(substr(FOXP2_data$rs34684677, 1, 1),
substr(FOXP2_data$rs34684677, 3, 3),
substr(FOXP2_data$rs2894715, 1, 1),
substr(FOXP2_data$rs2894715, 3, 3))
snpnames <- c("rs34684677", "rs2894715")
haplo_em <- haplo.em(Geno, locus.label = snpnames)
print(haplo_em)
D <- ld$D
# Calculate allele frequencies for SNP rs34684677
pG <- (sum(rs34684677.gen == "G/G")*2 + sum(rs34684677.gen == "G/T")) /
(2 * length(rs34684677.gen))
pT <- 1 - pG
# Calculate allele frequencies for SNP rs2894715
qG <- (sum(rs2894715.gen  == "G/G")*2 + sum(rs2894715.gen  == "T/G")) /
(2 * length(rs2894715.gen ))
qT <- 1 - qG
# Calculate haplotype frequencies
hGG <- pG * qG + D
hGT <- pG * qT - D
hTG <- pT * qG - D
hTT <- pT * qT + D
haplo_freqs <- c(hGG, hGT, hTG, hTT)
names(haplo_freqs) <- c("hGG", "hGT", "hTG", "hTT")
print(round(haplo_freqs, 3))
most_common_haplo <- names(which.max(haplo_freqs))
cat("The most common haplotype is:", most_common_haplo, "with a frequency of:",
round(max(haplo_freqs), 3), "\n")
bim <- read.table("FOXP2/FOXP2.bim", header=FALSE)
bim_alleles <- paste(bim[,5],bim[,6],sep = "/")
gendata_counts <- MakeCounts(FOXP2_data, bim_alleles, sep = "/")
chisq_stats <- HWChisqStats(gendata_counts,pvalues = FALSE)
chisq_pval <- HWChisqStats(gendata_counts,pvalues = TRUE)
chisq_pval_sig <- sum(chisq_pval<0.05) # number of significant SNPs
chisq_pval_sig
expected_by_chance <- nrow(bim) * 0.05
cat("\nExpected by chance:",expected_by_chance, "(5%)\n")
# Total number of SNPs tested
total_SNPs <- nrow(bim)
# Calculate the percentage of significant variants
percentage_significant <- (chisq_pval_sig / total_SNPs) * 100
cat("\nPercentage of significant variants:", percentage_significant, "%\n")
# Extract SNP names and convert to genotypes
snps <- colnames(FOXP2_data)
genotypes <- lapply(FOXP2_data, function(x) genotype(as.character(x)))
# Initialize a matrix to store R^2 values
r2_matrix <- matrix(NA, ncol = length(snps), nrow = length(snps),
dimnames = list(snps, snps))
# Compute LD and fill the matrix
for (i in 1:(length(snps) - 1)) {
for (j in (i + 1):length(snps)) {
ld_result <- LD(genotypes[[i]], genotypes[[j]])
r2_matrix[i, j] <- ld_result$`R^2`
}
}
# Create LD heatmap using base R image function
image(r2_matrix, main = "LD Heatmap (R^2 values)", xlab = "SNP Index",
ylab = "SNP Index", col = heat.colors(256))
calculate_MAF <- function(snp) {
alleles <- unlist(strsplit(as.character(snp), "/", fixed = TRUE))
freqs <- table(alleles) / length(alleles)
return(min(freqs))
}
MAFs <- sapply(FOXP2_data, calculate_MAF)
df_filtered <- FOXP2_data[, MAFs >= 0.35]
genotypes_filtered <- lapply(df_filtered, function(x) genotype(as.character(x)))
snps_filtered <- colnames(df_filtered)
r2_matrix_filtered <- matrix(NA, ncol = length(snps_filtered),
nrow = length(snps_filtered),
dimnames = list(snps_filtered, snps_filtered))
for (i in 1:(length(snps_filtered) - 1)) {
for (j in (i + 1):length(snps_filtered)) {
ld_result <- LD(genotypes_filtered[[i]], genotypes_filtered[[j]])
r2_matrix_filtered[i, j] <- ld_result$`R^2`
}
}
diag(r2_matrix_filtered) <- 1
image(r2_matrix_filtered, main = "LD Heatmap After Filtering (R^2 values)",
xlab = "SNP Index", ylab = "SNP Index", col = heat.colors(256))
basepair_positions <- bim[, 4]
num_snps <- length(basepair_positions)
# Initialize a matrix to store distances
distance_matrix <- matrix(NA, nrow = num_snps, ncol = num_snps)
# Compute the distances
for (i in 1:(num_snps - 1)) {
for (j in (i + 1):num_snps) {
distance_matrix[i, j] <- abs(basepair_positions[i] - basepair_positions[j])
distance_matrix[j, i] <- distance_matrix[i, j] #Distance matrix is symmetric
}
}
distances <- as.vector(distance_matrix)
r2_values <- as.vector(r2_matrix)
plot_data <- data.frame(Distance = distances, R2 = r2_values)
plot(plot_data$Distance, plot_data$R2,
xlab = "Distance in base pairs",
ylab = expression(R^2),
main = "R^2 vs. Distance",
pch = 20,
cex = 0.6)
APOE_data <- read.table("APOE/APOE.dat", header = TRUE)
APOE_data <- APOE_data[,2:ncol(APOE_data)]
n_individuals <- nrow(APOE_data)
n_SNPs <- ncol(APOE_data)
percent_missing <- sum(is.na(APOE_data)) / (n_individuals * n_SNPs) * 100
cat("\nNum individuals:",n_individuals, "\n")
cat("\nNum SNPs:",n_SNPs, "\n")
cat("\nPercentage missing:",percent_missing, "\n")
theoretical_haplotypes <- 2^n_SNPs
cat("\nTheoretically there can be :",theoretical_haplotypes,"haplotypes\n")
geno <- data.frame(row.names = row.names(APOE_data))
for(i in 1:ncol(APOE_data)){
geno <- cbind(geno,substr(APOE_data[,i],1,1),substr(APOE_data[,i],3,3))
}
geno_matrix <- as.matrix(geno)
snpts <- colnames(APOE_data)
haplo_em <- haplo.em(geno_matrix,locus.label = snpts)
haplotypes <- length(haplo_em$hap.prob)
cat("\nHaplotypes :",haplotypes,"\n")
probabilities <- sort(haplo_em$hap.prob,decreasing = T)
cat("\nProbabilities in decreasing order :",probabilities,"\n")
most_common <-  which.max(haplo_em$hap.prob)
cat("\nMost common :", most_common,"\n")
bim_he_data <- read.table("APOE/APOE.bim", header = FALSE,
col.names = c("chromosome", "SNP", "genetic_dist",
"position", "allele1", "allele2"))
allele_pairs <- paste(bim_he_data$allele1, bim_he_data$allele2, sep = "/")
df <- APOE_data
df[] <- lapply(df, function(x) gsub("/", "", x))
df_counts <- MakeCounts(df, allele_pairs)
df_counts[,c(1,3)] <- df_counts[,c(3,1)]
pb <- numeric(nrow(df_counts))
for(i in 1:nrow(df_counts)) {
pb[i] <- (df_counts[i,3] + 0.5 * df_counts[i,2]) / sum(df_counts[i,])
}
to_remove <- which(pb<0.1);
df_filtered <- APOE_data[,-to_remove]
geno <- data.frame(row.names = row.names(df_filtered))
for(i in 1:ncol(df_filtered)){
geno <- cbind(geno,substr(df_filtered[,i],1,1),substr(df_filtered[,i],3,3))
}
geno <- as.matrix(geno)
snpnames <- colnames(df_filtered)
HaploEM <- haplo.em(geno, locus.label = snpnames)
prob <- sort(HaploEM$hap.prob, decreasing = T)
cat("Number of haplotypes:", length(prob), "\n")
