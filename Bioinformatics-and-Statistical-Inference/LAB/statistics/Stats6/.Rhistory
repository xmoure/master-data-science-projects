# Load data
# Full dataset
yri6 <- fread("YRI6.raw")
#yri6[,(6:ncol(yri6)) := lapply(.SD, function(x) as.numeric(replace(x, x == -9, NA))), .SDcols = 6:ncol(yri6)]
# Subset containing only SNP data
yri6_snps <- yri6[, 7:ncol(yri6)]
yri6_snps <- as.data.frame(yri6_snps)
# Number of individuals and SNPs
num_individuals <- nrow(yri6_snps)
num_snps <- ncol(yri6) - 6  # Subtracting non-SNP columns
# Calculate missing data percentage
missing_data_percentage <- sum(is.na(yri6[, 7:ncol(yri6)])) / (num_individuals * num_snps) * 100
# Output
cat("Number of individuals:", num_individuals, "\n")
cat("Number of SNPs:", num_snps, "\n")
cat("Percentage of missing data:", missing_data_percentage, "%\n")
# Function to calculate shared alleles
shared_alleles <- function(a, b) {
2 - abs(a - b)
}
num_individuals <- nrow(yri6)
num_combinations <- choose(num_individuals, 2)
results <- matrix(nrow = num_combinations, ncol = 3)
colnames(results) <- c("Pair", "m", "s")
# Generate combinations of individuals
combos <- combn(num_individuals, 2)
counter <- 1
# Loop through each combination of individuals
for (i in 1:ncol(combos)) {
ind1 <- combos[1, i]
ind2 <- combos[2, i]
# Extract SNP data for the pair
snps1 <- as.integer(yri6[ind1, 6:ncol(yri6)])
snps2 <- as.integer(yri6[ind2, 6:ncol(yri6)])
shared <- shared_alleles(snps1, snps2)
m <- mean(shared, na.rm = TRUE)
s <- sd(shared, na.rm = TRUE)
results[counter, ] <- c(paste("Ind", ind1, "- Ind", ind2), m, s)
counter <- counter + 1
}
results_df <- as.data.frame(results)
results_df$m <- as.numeric(as.character(results_df$m))
results_df$s <- as.numeric(as.character(results_df$s))
head(results_df, 5)
results_part3 <- data.frame(
Pair = character(),
p0 = numeric(),
p2 = numeric(),
m = numeric(),
m_check = logical()
)
for (i in 1:(nrow(yri6) - 1)) {
for (j in (i + 1):nrow(yri6)) {
snp_data_i <- unlist(yri6[i, 6:ncol(yri6)])
snp_data_j <- unlist(yri6[j, 6:ncol(yri6)])
# Shared alleles calculation
#shared <- 2 - abs(snp_data_i - snp_data_j)
shared <- mapply(share, snp_data_i, snp_data_j)
# Calculate p0, p2, and check if m = 1 - p0 + p2
p0 <- mean(shared == 0, na.rm = TRUE)
p2 <- mean(shared == 2, na.rm = TRUE)
m <- mean(shared, na.rm = TRUE)
m_check <- abs(m - (1 - p0 + p2)) < 0.0001
# Add the results to the data frame
results_part3 <- rbind(results_part3, data.frame(
Pair = paste("Ind", i, "- Ind", j),
p0 = p0,
p2 = p2,
m= m,
m_check = m_check
))
}
}
results_part3 <- data.frame(
Pair = character(),
p0 = numeric(),
p2 = numeric(),
m = numeric(),
m_check = logical()
)
for (i in 1:(nrow(yri6) - 1)) {
for (j in (i + 1):nrow(yri6)) {
snp_data_i <- unlist(yri6[i, 6:ncol(yri6)])
snp_data_j <- unlist(yri6[j, 6:ncol(yri6)])
# Shared alleles calculation
shared <- 2 - abs(snp_data_i - snp_data_j)
#shared <- mapply(share, snp_data_i, snp_data_j)
# Calculate p0, p2, and check if m = 1 - p0 + p2
p0 <- mean(shared == 0, na.rm = TRUE)
p2 <- mean(shared == 2, na.rm = TRUE)
m <- mean(shared, na.rm = TRUE)
m_check <- abs(m - (1 - p0 + p2)) < 0.0001
# Add the results to the data frame
results_part3 <- rbind(results_part3, data.frame(
Pair = paste("Ind", i, "- Ind", j),
p0 = p0,
p2 = p2,
m= m,
m_check = m_check
))
}
}
str(results_part3)
head(results_part3, 5)
# Plot m against s
plot_m_vs_s <- ggplot(results_df, aes(x = m, y = s)) +
geom_point() +
theme_minimal() +
labs(title = "Mean vs. Standard Deviation of Shared Alleles",
x = "Mean of Shared Alleles (m)",
y = "Standard Deviation of Shared Alleles (s)")
print(plot_m_vs_s)
results_part3$p0 <- as.numeric(as.character(results_part3$p0))
results_part3$p2 <- as.numeric(as.character(results_part3$p2))
# Plot p0 against p2
plot_p0_vs_p2 <- ggplot(results_part3, aes(x = p0, y = p2)) +
geom_point() +
theme_minimal() +
labs(title = "Fraction of Variants Shared 0 Alleles vs. 2 Alleles",
x = "Fraction of Variants Shared 0 Alleles (p0)",
y = "Fraction of Variants Shared 2 Alleles (p2)")
print(plot_p0_vs_p2)
is_parent_offspring <- function(ind1, ind2, data) {
parents_ind1 <- data[IID == ind1, .(PAT, MAT)]
parents_ind2 <- data[IID == ind2, .(PAT, MAT)]
return((ind1 %in% c(parents_ind2$PAT, parents_ind2$MAT)) |
(ind2 %in% c(parents_ind1$PAT, parents_ind1$MAT)))
}
label_matrix <- matrix(NA, nrow = nrow(yri6), ncol = nrow(yri6))
rownames(label_matrix) <- yri6$IID
colnames(label_matrix) <- yri6$IID
for (i in 1:(nrow(yri6) - 1)) {
for (j in (i + 1):nrow(yri6)) {
# Check if the pair is parent-offspring
if (is_parent_offspring(yri6$IID[i], yri6$IID[j], yri6)) {
label_matrix[i, j] <- "Parent-Offspring"
label_matrix[j, i] <- "Parent-Offspring"  # Symmetry
} else {
label_matrix[i, j] <- "Unrelated"
label_matrix[j, i] <- "Unrelated"  # Symmetry
}
}
}
# Applying the function to label each pair as parent-offspring or unrelated
results_df$Label <- mapply(is_parent_offspring,
as.character(yri6$IID[combos[1,]]),
as.character(yri6$IID[combos[2,]]),
MoreArgs = list(data = yri6))
# Correcting the labels from TRUE/FALSE to Parent-Offspring/Unrelated
results_df$Label <- factor(results_df$Label, labels = c("Unrelated", "Parent-Offspring"))
# Create the scatter plot
plot_m_vs_s_labeled <- ggplot(results_df, aes(x = m, y = s, color = Label)) +
geom_point() +
theme_minimal() +
labs(title = "Mean vs. Standard Deviation of Shared Alleles",
x = "Mean Number of Shared Alleles (m)",
y = "Standard Deviation of Shared Alleles (s)",
color = "Relationship") +
scale_color_manual(values = c("Unrelated" = 'red', "Parent-Offspring" = 'blue'))
# Print the labeled plot
print(plot_m_vs_s_labeled)
yri6_snps_matrix <- as.matrix(yri6_snps)
sample_ids <- yri6$IID
# Create the GDS file
gds_file <- "genotype_data.gds"
snpgdsCreateGeno(gds_file, yri6_snps_matrix, sample.id = sample_ids, snp.id = colnames(yri6_snps_matrix), snpfirstdim = FALSE)
genofile <- snpgdsOpen(gds_file)
# Perform LD pruning
snpset <- snpgdsLDpruning(genofile, ld.threshold = 0.2)
snpset.id <- unlist(unname(snpset))
# Estimate IBD probabilities
ibd <- snpgdsIBDMLE(genofile, maf = 0.05, missing.rate = 0.05, snp.id = snpset.id)
# Select IBD estimates using the 'ibd' method
ibd_selection <- snpgdsIBDSelection(ibd)
snpgdsClose(genofile)
# Assign labels from the labels_matrix to the IBD selection data frame
ibd_selection$label <- mapply(function(id1, id2) label_matrix[id1, id2],
ibd_selection$ID1, ibd_selection$ID2)
# Plot using ggplot2
library(ggplot2)
ggplot(ibd_selection, aes(x = k0, y = k1, color = label)) +
geom_point() +
geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "black") +
scale_color_manual(values = c("Unrelated" = 'red', "Parent-Offspring" = 'blue')) +
labs(title = "IBD Probabilities (k0 vs k1) with Relationships",
x = "Probability of Sharing 0 IBD Alleles (k0)",
y = "Probability of Sharing 1 IBD Allele (k1)",
color = "Relationship")
# Load data
yri6 <- fread("YRI6.raw")
yri6_snps <- yri6[, 7:ncol(yri6)]
yri6_snps <- as.data.frame(yri6_snps)
# Number of individuals and SNPs
num_individuals <- nrow(yri6_snps)
num_snps <- ncol(yri6) - 6  # Subtracting non-SNP columns
# Calculate missing data percentage
missing_data_percentage <- sum(is.na(yri6[, 7:ncol(yri6)])) /
(num_individuals * num_snps) * 100
# Output
cat("Number of individuals:", num_individuals, "\n")
cat("Number of SNPs:", num_snps, "\n")
cat("Percentage of missing data:", missing_data_percentage, "%\n")
# Function to calculate shared alleles
shared_alleles <- function(a, b) {
2 - abs(a - b)
}
num_individuals <- nrow(yri6)
num_combinations <- choose(num_individuals, 2)
results <- matrix(nrow = num_combinations, ncol = 3)
colnames(results) <- c("Pair", "m", "s")
# Generate combinations of individuals
combos <- combn(num_individuals, 2)
counter <- 1
# Loop through each combination of individuals
for (i in 1:ncol(combos)) {
ind1 <- combos[1, i]
ind2 <- combos[2, i]
# Extract SNP data for the pair
snps1 <- as.integer(yri6[ind1, 6:ncol(yri6)])
snps2 <- as.integer(yri6[ind2, 6:ncol(yri6)])
shared <- shared_alleles(snps1, snps2)
m <- mean(shared, na.rm = TRUE)
s <- sd(shared, na.rm = TRUE)
results[counter, ] <- c(paste("Ind", ind1, "- Ind", ind2), m, s)
counter <- counter + 1
}
results_df <- as.data.frame(results)
results_df$m <- as.numeric(as.character(results_df$m))
results_df$s <- as.numeric(as.character(results_df$s))
head(results_df, 5)
results_part3 <- data.frame(
Pair = character(),
p0 = numeric(),
p2 = numeric(),
m = numeric(),
m_check = logical()
)
for (i in 1:(nrow(yri6) - 1)) {
for (j in (i + 1):nrow(yri6)) {
snp_data_i <- unlist(yri6[i, 6:ncol(yri6)])
snp_data_j <- unlist(yri6[j, 6:ncol(yri6)])
# Shared alleles calculation
shared <- 2 - abs(snp_data_i - snp_data_j)
#shared <- mapply(share, snp_data_i, snp_data_j)
# Calculate p0, p2, and check if m = 1 - p0 + p2
p0 <- mean(shared == 0, na.rm = TRUE)
p2 <- mean(shared == 2, na.rm = TRUE)
m <- mean(shared, na.rm = TRUE)
m_check <- abs(m - (1 - p0 + p2)) < 0.0001
# Add the results to the data frame
results_part3 <- rbind(results_part3, data.frame(
Pair = paste("Ind", i, "- Ind", j),
p0 = p0,
p2 = p2,
m= m,
m_check = m_check
))
}
}
str(results_part3)
head(results_part3, 5)
# Plot m against s
plot_m_vs_s <- ggplot(results_df, aes(x = m, y = s)) +
geom_point() +
theme_minimal() +
labs(title = "Mean vs. Standard Deviation of Shared Alleles",
x = "Mean of Shared Alleles (m)",
y = "Standard Deviation of Shared Alleles (s)")
print(plot_m_vs_s)
results_part3$p0 <- as.numeric(as.character(results_part3$p0))
results_part3$p2 <- as.numeric(as.character(results_part3$p2))
# Plot p0 against p2
plot_p0_vs_p2 <- ggplot(results_part3, aes(x = p0, y = p2)) +
geom_point() +
theme_minimal() +
labs(title = "Fraction of Variants Shared 0 Alleles vs. 2 Alleles",
x = "Fraction of Variants Shared 0 Alleles (p0)",
y = "Fraction of Variants Shared 2 Alleles (p2)")
print(plot_p0_vs_p2)
is_parent_offspring <- function(ind1, ind2, data) {
parents_ind1 <- data[IID == ind1, .(PAT, MAT)]
parents_ind2 <- data[IID == ind2, .(PAT, MAT)]
return((ind1 %in% c(parents_ind2$PAT, parents_ind2$MAT)) |
(ind2 %in% c(parents_ind1$PAT, parents_ind1$MAT)))
}
label_matrix <- matrix(NA, nrow = nrow(yri6), ncol = nrow(yri6))
rownames(label_matrix) <- yri6$IID
colnames(label_matrix) <- yri6$IID
for (i in 1:(nrow(yri6) - 1)) {
for (j in (i + 1):nrow(yri6)) {
# Check if the pair is parent-offspring
if (is_parent_offspring(yri6$IID[i], yri6$IID[j], yri6)) {
label_matrix[i, j] <- "Parent-Offspring"
label_matrix[j, i] <- "Parent-Offspring"  # Symmetry
} else {
label_matrix[i, j] <- "Unrelated"
label_matrix[j, i] <- "Unrelated"  # Symmetry
}
}
}
# Applying the function to label each pair as parent-offspring or unrelated
results_df$Label <- mapply(is_parent_offspring,
as.character(yri6$IID[combos[1,]]),
as.character(yri6$IID[combos[2,]]),
MoreArgs = list(data = yri6))
# Correcting the labels from TRUE/FALSE to Parent-Offspring/Unrelated
results_df$Label <- factor(results_df$Label,
labels = c("Unrelated", "Parent-Offspring"))
# Create the scatter plot
plot_m_vs_s_labeled <- ggplot(results_df, aes(x = m, y = s, color = Label)) +
geom_point() +
theme_minimal() +
labs(title = "Mean vs. Standard Deviation of Shared Alleles",
x = "Mean Number of Shared Alleles (m)",
y = "Standard Deviation of Shared Alleles (s)",
color = "Relationship") +
scale_color_manual(values = c("Unrelated" = 'red',
"Parent-Offspring" = 'blue'))
# Print the labeled plot
print(plot_m_vs_s_labeled)
yri6_snps_matrix <- as.matrix(yri6_snps)
sample_ids <- yri6$IID
# Create the GDS file
gds_file <- "genotype_data.gds"
snpgdsCreateGeno(gds_file, yri6_snps_matrix, sample.id = sample_ids,
snp.id = colnames(yri6_snps_matrix), snpfirstdim = FALSE)
genofile <- snpgdsOpen(gds_file)
# Perform LD pruning
snpset <- snpgdsLDpruning(genofile, ld.threshold = 0.2)
snpset.id <- unlist(unname(snpset))
# Estimate IBD probabilities
ibd <- snpgdsIBDMLE(genofile, maf = 0.05, missing.rate = 0.05,
snp.id = snpset.id)
# Select IBD estimates using the 'ibd' method
ibd_selection <- snpgdsIBDSelection(ibd)
snpgdsClose(genofile)
# Assign labels from the labels_matrix to the IBD selection data frame
ibd_selection$label <- mapply(function(id1, id2) label_matrix[id1, id2],
ibd_selection$ID1, ibd_selection$ID2)
# Plot using ggplot2
library(ggplot2)
ggplot(ibd_selection, aes(x = k0, y = k1, color = label)) +
geom_point() +
geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "black") +
scale_color_manual(values =
c("Unrelated" = 'red', "Parent-Offspring" = 'blue')) +
labs(title = "IBD Probabilities (k0 vs k1) with Relationships",
x = "Probability of Sharing 0 IBD Alleles (k0)",
y = "Probability of Sharing 1 IBD Allele (k1)",
color = "Relationship")
# Load data
yri6 <- fread("YRI6.raw")
yri6_snps <- yri6[, 7:ncol(yri6)]
yri6_snps <- as.data.frame(yri6_snps)
# Number of individuals and SNPs
num_individuals <- nrow(yri6_snps)
num_snps <- ncol(yri6) - 6  # Subtracting non-SNP columns
# Calculate missing data percentage
missing_data_percentage <- sum(is.na(yri6[, 7:ncol(yri6)])) /
(num_individuals * num_snps) * 100
# Output
cat("Number of individuals:", num_individuals, "\n")
cat("Number of SNPs:", num_snps, "\n")
cat("Percentage of missing data:", missing_data_percentage, "%\n")
# Function to calculate shared alleles
shared_alleles <- function(a, b) {
2 - abs(a - b)
}
num_individuals <- nrow(yri6)
num_combinations <- choose(num_individuals, 2)
results <- matrix(nrow = num_combinations, ncol = 3)
colnames(results) <- c("Pair", "m", "s")
# Generate combinations of individuals
combos <- combn(num_individuals, 2)
counter <- 1
# Loop through each combination of individuals
for (i in 1:ncol(combos)) {
ind1 <- combos[1, i]
ind2 <- combos[2, i]
# Extract SNP data for the pair
snps1 <- as.integer(yri6[ind1, 6:ncol(yri6)])
snps2 <- as.integer(yri6[ind2, 6:ncol(yri6)])
shared <- shared_alleles(snps1, snps2)
m <- mean(shared, na.rm = TRUE)
s <- sd(shared, na.rm = TRUE)
results[counter, ] <- c(paste("Ind", ind1, "- Ind", ind2), m, s)
counter <- counter + 1
}
results_df <- as.data.frame(results)
results_df$m <- as.numeric(as.character(results_df$m))
results_df$s <- as.numeric(as.character(results_df$s))
head(results_df, 5)
results_part3 <- data.frame(
Pair = character(),
p0 = numeric(),
p2 = numeric(),
m = numeric(),
m_check = logical()
)
for (i in 1:(nrow(yri6) - 1)) {
for (j in (i + 1):nrow(yri6)) {
snp_data_i <- unlist(yri6[i, 6:ncol(yri6)])
snp_data_j <- unlist(yri6[j, 6:ncol(yri6)])
# Shared alleles calculation
shared <- 2 - abs(snp_data_i - snp_data_j)
#shared <- mapply(share, snp_data_i, snp_data_j)
# Calculate p0, p2, and check if m = 1 - p0 + p2
p0 <- mean(shared == 0, na.rm = TRUE)
p2 <- mean(shared == 2, na.rm = TRUE)
m <- mean(shared, na.rm = TRUE)
m_check <- abs(m - (1 - p0 + p2)) < 0.0001
# Add the results to the data frame
results_part3 <- rbind(results_part3, data.frame(
Pair = paste("Ind", i, "- Ind", j),
p0 = p0,
p2 = p2,
m= m,
m_check = m_check
))
}
}
str(results_part3)
head(results_part3, 5)
# Plot m against s
plot_m_vs_s <- ggplot(results_df, aes(x = m, y = s)) +
geom_point() +
theme_minimal() +
labs(title = "Mean vs. Standard Deviation of Shared Alleles",
x = "Mean of Shared Alleles (m)",
y = "Standard Deviation of Shared Alleles (s)")
print(plot_m_vs_s)
results_part3$p0 <- as.numeric(as.character(results_part3$p0))
results_part3$p2 <- as.numeric(as.character(results_part3$p2))
# Plot p0 against p2
plot_p0_vs_p2 <- ggplot(results_part3, aes(x = p0, y = p2)) +
geom_point() +
theme_minimal() +
labs(title = "Fraction of Variants Shared 0 Alleles vs. 2 Alleles",
x = "Fraction of Variants Shared 0 Alleles (p0)",
y = "Fraction of Variants Shared 2 Alleles (p2)")
print(plot_p0_vs_p2)
is_parent_offspring <- function(ind1, ind2, data) {
parents_ind1 <- data[IID == ind1, .(PAT, MAT)]
parents_ind2 <- data[IID == ind2, .(PAT, MAT)]
return((ind1 %in% c(parents_ind2$PAT, parents_ind2$MAT)) |
(ind2 %in% c(parents_ind1$PAT, parents_ind1$MAT)))
}
label_matrix <- matrix(NA, nrow = nrow(yri6), ncol = nrow(yri6))
rownames(label_matrix) <- yri6$IID
colnames(label_matrix) <- yri6$IID
for (i in 1:(nrow(yri6) - 1)) {
for (j in (i + 1):nrow(yri6)) {
# Check if the pair is parent-offspring
if (is_parent_offspring(yri6$IID[i], yri6$IID[j], yri6)) {
label_matrix[i, j] <- "Parent-Offspring"
label_matrix[j, i] <- "Parent-Offspring"  # Symmetry
} else {
label_matrix[i, j] <- "Unrelated"
label_matrix[j, i] <- "Unrelated"  # Symmetry
}
}
}
# Applying the function to label each pair as parent-offspring or unrelated
results_df$Label <- mapply(is_parent_offspring,
as.character(yri6$IID[combos[1,]]),
as.character(yri6$IID[combos[2,]]),
MoreArgs = list(data = yri6))
# Correcting the labels from TRUE/FALSE to Parent-Offspring/Unrelated
results_df$Label <- factor(results_df$Label,
labels = c("Unrelated", "Parent-Offspring"))
# Create the scatter plot
plot_m_vs_s_labeled <- ggplot(results_df, aes(x = m, y = s, color = Label)) +
geom_point() +
theme_minimal() +
labs(title = "Mean vs. Standard Deviation of Shared Alleles",
x = "Mean Number of Shared Alleles (m)",
y = "Standard Deviation of Shared Alleles (s)",
color = "Relationship") +
scale_color_manual(values = c("Unrelated" = 'red',
"Parent-Offspring" = 'blue'))
# Print the labeled plot
print(plot_m_vs_s_labeled)
yri6_snps_matrix <- as.matrix(yri6_snps)
sample_ids <- yri6$IID
# Create the GDS file
gds_file <- "genotype_data.gds"
snpgdsCreateGeno(gds_file, yri6_snps_matrix, sample.id = sample_ids,
snp.id = colnames(yri6_snps_matrix), snpfirstdim = FALSE)
genofile <- snpgdsOpen(gds_file)
# Perform LD pruning
snpset <- snpgdsLDpruning(genofile, ld.threshold = 0.2)
snpset.id <- unlist(unname(snpset))
# Estimate IBD probabilities
ibd <- snpgdsIBDMLE(genofile, maf = 0.05, missing.rate = 0.05,
snp.id = snpset.id)
# Select IBD estimates using the 'ibd' method
ibd_selection <- snpgdsIBDSelection(ibd)
snpgdsClose(genofile)
# Assign labels from the labels_matrix to the IBD selection data frame
ibd_selection$label <- mapply(function(id1, id2) label_matrix[id1, id2],
ibd_selection$ID1, ibd_selection$ID2)
# Plot using ggplot2
library(ggplot2)
ggplot(ibd_selection, aes(x = k0, y = k1, color = label)) +
geom_point() +
geom_abline(intercept = 1, slope = -1, linetype = "dashed", color = "black") +
scale_color_manual(values =
c("Unrelated" = 'red', "Parent-Offspring" = 'blue')) +
labs(title = "IBD Probabilities (k0 vs k1) with Relationships",
x = "Probability of Sharing 0 IBD Alleles (k0)",
y = "Probability of Sharing 1 IBD Allele (k1)",
color = "Relationship")
