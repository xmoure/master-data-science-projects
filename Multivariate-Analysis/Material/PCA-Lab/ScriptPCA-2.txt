####PLEASE--BEFORE STARTING, INSTALL THE FOLLOWING PACKAGES
#### FactoMineR, factoextra, corrplot

####DOCUMENTATION AT https://cran.r-project.org/web/packages/FactoMineR/FactoMineR.pdf
################### https://cran.r-project.org/web/packages/factoextra/factoextra.pdf
#################### PCA with prcomp() (PCA default in R) --> https://www.datacamp.com/community/tutorials/pca-analysis-r

####IF YOU WANT, Practice the same script with"decathlon2" dataset 

#### LIBRARIES FOR PCA
library(FactoMineR)
library(factoextra)
library(corrplot)

#####IMPORTING THE DATASET FROM R REPOSITORY
data(decathlon)
help(decathlon)
?PCA

##### CHECKING DATA
str(decathlon)
summary(decathlon)
row.names(decathlon)
R <- cor(decathlon[,1:10])
corrplot(R, method = "number",number.cex = 0.75)
##### PCA 
dec.pca = PCA(decathlon[,1:10], scale.unit=TRUE, ncp=5, graph=F) 
# dec.pca = PCA(decathlon[,1:10], scale.unit=TRUE, ncp=5, graph=T) 
summary(dec.pca)
print(dec.pca)
get_pca(dec.pca)
################################################EXPLORING PCA RESULTS
get_eigenvalue(dec.pca)
fviz_eig(dec.pca)
get_pca_ind(dec.pca) ## get_pca_var(dec.pca): Extract the results for individuals and variables, respectively.
fviz_pca_ind(dec.pca) ## fviz_pca_var(dec.pca): Visualize the results individuals and variables, respectively.
fviz_pca_biplot(dec.pca) ## Make a biplot of individuals and variables.

###Step by step
eig.val <- get_eigenvalue(dec.pca)
eig.val

####NOTES:An eigenvalue > 1 indicates that PCs account for more variance than accounted by one of the original variables
######### in standardized data. This is commonly used as a cutoff point for which PCs are retained. This holds true only
######### when the data are standardized. You can also limit the number of component to that number that accounts for a 
#########certain fraction of the total variance. For example, if you are satisfied with 70% of the total variance explained
######### then use the number of components to achieve that.

fviz_eig(dec.pca, addlabels = TRUE, ylim = c(0, 50))
fviz_screeplot(dec.pca) 
fviz_screeplot(dec.pca, addlabels = TRUE, ylim = c(0, 20))

var <- get_pca_var(dec.pca)
var

#The components of the get_pca_var() can be used in the plot of variables as follow:

###NOTES: var$coord: coordinates of variables to create a scatter plot
###var$cos2: represents the quality of representation for variables on the factor map. Itâ€™s calculated as the squared
###coordinates: var.cos2 = var.coord * var.coord.
###var$contrib: contains the contributions (in percentage) of the variables to the principal components.
###The contribution of a variable (var) to a given principal component is (in percentage) : (var.cos2 * 100) / (total cos2 of the component).

# Coordinates
head(var$coord)
# Cos2: quality on the factore map
head(var$cos2)
# Contributions to the principal components
head(var$contrib)

###Correlation circle
fviz_pca_var(dec.pca, col.var = "black")

###NOTES:
#    Positively correlated variables are grouped together.
#    Negatively correlated variables are positioned on opposite sides of the plot origin (opposed quadrants).
#    The distance between variables and the origin measures the quality of the variables on the factor map. 
#     Variables that are away from the origin are well represented on the factor map.

####Quality of representation
head(var$cos2, 4)
corrplot(var$cos2, is.corr=FALSE)
fviz_cos2(dec.pca, choice = "var", axes = 1:2)


# NOTES:
# A high cos2 indicates a good representation of the variable on the principal component. In this case the variable is positioned close to the circumference of the correlation circle.
# A low cos2 indicates that the variable is not perfectly represented by the PCs. In this case the variable is close to the center of the circle.

fviz_pca_var(dec.pca, col.var = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE) # Avoid text overlapping
fviz_pca_var(dec.pca, alpha.var = "cos2")


####Contributions of variables to PCs

####NOTES: Variables that are correlated with PC1 (i.e., Dim.1) and PC2 (i.e., Dim.2) are the most important in explaining the variability in the data set.
##### Variables that do not correlated with any PC or correlated with the last dimensions are variables with low contribution and might be removed to simplify the overall analysis.
#####The larger the value of the contribution, the more the variable contributes to the component. 

head(var$contrib, 4)
corrplot(var$contrib, is.corr=FALSE) 
# Contributions of variables to PC1
fviz_contrib(dec.pca, choice = "var", axes = 1, top = 10)
# Contributions of variables to PC2
fviz_contrib(dec.pca, choice = "var", axes = 2, top = 10)

####IMPORTANT
fviz_contrib(dec.pca, choice = "var", axes = 1:2, top = 10)
fviz_pca_var(dec.pca, col.var = "contrib",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))

#### AN EXTRA (Clustering approach)
# Create a grouping variable using kmeans
# Create 3 groups of variables (centers = 3)
set.seed(123)
res.km <- kmeans(var$coord, centers = 3, nstart = 25)
grp <- as.factor(res.km$cluster)
# Color variables by groups
fviz_pca_var(dec.pca, col.var = grp, palette = c("#0073C2FF", "#EFC000FF", "#868686FF"),legend.title = "Cluster")


############Dimension description
res.desc <- dimdesc(dec.pca, axes = c(1,2), proba = 0.05)
# Description of dimension 1
res.desc$Dim.1
# Description of dimension 2
res.desc$Dim.2
##### The dimdesc() function calculates the correlation coefficient between
##### a variable and a dimension and performs a significance test.  
##### This function is very useful in settings where there are many variables and allows to make the interpretation easier.


#####################GRAPH OF INDIVIDUALS
ind <- get_pca_ind(dec.pca)
# Coordinates of individuals
head(ind$coord)
# Quality of individuals
head(ind$cos2)
# Contributions of individuals
head(ind$contrib)

####PLOTS --> QUALITY & CONTRIBUTION
fviz_pca_ind(dec.pca)
fviz_pca_ind(dec.pca, col.ind = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
fviz_pca_ind(dec.pca, pointsize = "cos2",pointshape = 21, fill = "#E7B800",repel = TRUE) # Avoid text overlapping (slow if many points))
fviz_pca_ind(dec.pca, col.ind = "cos2", pointsize = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)

fviz_cos2(dec.pca, choice = "ind")
# Total contribution on PC1 and PC2
fviz_contrib(dec.pca, choice = "ind", axes = 1:2)

# Variables on dimensions 2 and 3
fviz_pca_var(dec.pca, axes = c(2, 3))
# Individuals on dimensions 2 and 3
fviz_pca_ind(dec.pca, axes = c(2, 3))

#########BIPLOT
fviz_pca_biplot(dec.pca, repel = TRUE,col.var = "#2E9FDF", col.ind = "#696969")

### NOTES:Roughly speaking a biplot can be interpreted as follow:
#    an individual that is on the same side of a given variable has a high value for this variable;
#    an individual that is on the opposite side of a given variable has a low value for this variable.

#fviz_pca_biplot(dec.pca, col.ind=decathlon$Competition, palette = "jco", addEllipses = TRUE, label = "var", col.var = "black", repel = TRUE, legend.title = "Competition")                 


###############PCA suplementary variables
#### Supplementary variables have no influence on the principal components of the analysis.
#### They are going to help to interpret the dimensions of variability.
#### Add also supplementary categorical variable,"Competition"
#### The categories' centres of gravity of this new variable appear on the graph of the individuals.They are
#### located at the barycentre of the individuals who took them and they represent an average individual. 

res.pca <- PCA(decathlon, quanti.sup = 11:12, quali.sup = 13, graph=FALSE)
res.pca$quanti.sup
fviz_pca_var(res.pca)
res.pca$quali
fviz_pca_ind(res.pca, habillage = 13, addEllipses =TRUE, ellipse.type = "confidence", palette = "jco", repel = TRUE) 
fviz_pca_biplot(res.pca, select.ind = list(contrib = 5),select.var = list(contrib = 5),ggtheme = theme_minimal())
fviz_pca_biplot(res.pca, col.var = "contrib", gradient.cols = c("green", "orange", "red"))
plot(res.pca, cex=0.8, habillage="Competition")
plotellipses(res.pca, level=0.99)

### Graph for dimensions 3 and 4
plot(res.pca, choix="ind", cex=0.8, habillage=13, title="Individuals PCA graph",axes=3:4)
plot(res.pca, choix="var", title="Variables PCA graph", axes=3:4)

### Selecting individuals
#plot(res.pca, cex=0.8, habillage=13, select="cos2 0.7")
#plot(res.pca, cex=0.8, habillage=13, select="contrib 5")
#plot(res.pca, cex=0.8, habillage=13, select=c("Clay","Karpov"))

### Selecting variables
plot(res.pca, choix="var", select="contrib 5")


##### To go further:
##### To add supplementary individuals, use the following argument of the PCA function: "ind.sup"
##### In most PCAs, the weight of the individuals is equal to 1/(number of individuals). However, it is sometimes
##### necessary to give a specific weight to some individuals. To do so, the user will have to use the argument:"row.w"
##### It can also be interesting to give a specific weight to some variables. Here, the user will have to use the argument:"col.w"

###########PCA with prcomp ###Check ScriptPCA-Companies at our google drive or
####CHECK AT https://www.um.es/estadempresa/multivarianteR/ACP/caso_ACP.html#datos_del_problema (SpanishVersion)
